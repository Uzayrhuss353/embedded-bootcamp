
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004970  08004970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004970  08004970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004984  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e273  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c4  00000000  00000000  0002e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  000303b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  00031160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d07  00000000  00000000  00031c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011abd  00000000  00000000  0004b929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097058  00000000  00000000  0005d3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000328c  00000000  00000000  000f4440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000f76cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004898 	.word	0x08004898

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004898 	.word	0x08004898

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fe52 	bl	8000ed0 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fdb5 	bl	8000da0 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fc0f 	bl	8000a60 <__aeabi_fsub>
 8000242:	f000 fdad 	bl	8000da0 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	024a      	lsls	r2, r1, #9
 8000258:	0243      	lsls	r3, r0, #9
 800025a:	0045      	lsls	r5, r0, #1
 800025c:	0fc4      	lsrs	r4, r0, #31
 800025e:	0a50      	lsrs	r0, r2, #9
 8000260:	4680      	mov	r8, r0
 8000262:	0048      	lsls	r0, r1, #1
 8000264:	0a5b      	lsrs	r3, r3, #9
 8000266:	0e00      	lsrs	r0, r0, #24
 8000268:	0992      	lsrs	r2, r2, #6
 800026a:	4694      	mov	ip, r2
 800026c:	b580      	push	{r7, lr}
 800026e:	001e      	movs	r6, r3
 8000270:	4681      	mov	r9, r0
 8000272:	0002      	movs	r2, r0
 8000274:	0e2d      	lsrs	r5, r5, #24
 8000276:	00df      	lsls	r7, r3, #3
 8000278:	0fc9      	lsrs	r1, r1, #31
 800027a:	428c      	cmp	r4, r1
 800027c:	d024      	beq.n	80002c8 <__aeabi_fadd+0x78>
 800027e:	1a28      	subs	r0, r5, r0
 8000280:	2800      	cmp	r0, #0
 8000282:	dd0e      	ble.n	80002a2 <__aeabi_fadd+0x52>
 8000284:	2a00      	cmp	r2, #0
 8000286:	d13e      	bne.n	8000306 <__aeabi_fadd+0xb6>
 8000288:	4662      	mov	r2, ip
 800028a:	2a00      	cmp	r2, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x40>
 800028e:	e0fd      	b.n	800048c <__aeabi_fadd+0x23c>
 8000290:	1e42      	subs	r2, r0, #1
 8000292:	2801      	cmp	r0, #1
 8000294:	d100      	bne.n	8000298 <__aeabi_fadd+0x48>
 8000296:	e137      	b.n	8000508 <__aeabi_fadd+0x2b8>
 8000298:	28ff      	cmp	r0, #255	; 0xff
 800029a:	d100      	bne.n	800029e <__aeabi_fadd+0x4e>
 800029c:	e0a9      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800029e:	0010      	movs	r0, r2
 80002a0:	e039      	b.n	8000316 <__aeabi_fadd+0xc6>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d063      	beq.n	800036e <__aeabi_fadd+0x11e>
 80002a6:	464b      	mov	r3, r9
 80002a8:	1b52      	subs	r2, r2, r5
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	d000      	beq.n	80002b0 <__aeabi_fadd+0x60>
 80002ae:	e0e0      	b.n	8000472 <__aeabi_fadd+0x222>
 80002b0:	2f00      	cmp	r7, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_fadd+0x66>
 80002b4:	e0ce      	b.n	8000454 <__aeabi_fadd+0x204>
 80002b6:	1e53      	subs	r3, r2, #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	d100      	bne.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e155      	b.n	800056a <__aeabi_fadd+0x31a>
 80002be:	2aff      	cmp	r2, #255	; 0xff
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fadd+0x74>
 80002c2:	e094      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002c4:	001a      	movs	r2, r3
 80002c6:	e0d9      	b.n	800047c <__aeabi_fadd+0x22c>
 80002c8:	1a2a      	subs	r2, r5, r0
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	dc00      	bgt.n	80002d0 <__aeabi_fadd+0x80>
 80002ce:	e099      	b.n	8000404 <__aeabi_fadd+0x1b4>
 80002d0:	2800      	cmp	r0, #0
 80002d2:	d062      	beq.n	800039a <__aeabi_fadd+0x14a>
 80002d4:	2dff      	cmp	r5, #255	; 0xff
 80002d6:	d100      	bne.n	80002da <__aeabi_fadd+0x8a>
 80002d8:	e08b      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 80002da:	2380      	movs	r3, #128	; 0x80
 80002dc:	4661      	mov	r1, ip
 80002de:	04db      	lsls	r3, r3, #19
 80002e0:	4319      	orrs	r1, r3
 80002e2:	468c      	mov	ip, r1
 80002e4:	2a1b      	cmp	r2, #27
 80002e6:	dc00      	bgt.n	80002ea <__aeabi_fadd+0x9a>
 80002e8:	e0d2      	b.n	8000490 <__aeabi_fadd+0x240>
 80002ea:	2301      	movs	r3, #1
 80002ec:	19db      	adds	r3, r3, r7
 80002ee:	015a      	lsls	r2, r3, #5
 80002f0:	d56a      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 80002f2:	3501      	adds	r5, #1
 80002f4:	2dff      	cmp	r5, #255	; 0xff
 80002f6:	d05b      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80002f8:	2201      	movs	r2, #1
 80002fa:	49a3      	ldr	r1, [pc, #652]	; (8000588 <__aeabi_fadd+0x338>)
 80002fc:	401a      	ands	r2, r3
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	400b      	ands	r3, r1
 8000302:	4313      	orrs	r3, r2
 8000304:	e01c      	b.n	8000340 <__aeabi_fadd+0xf0>
 8000306:	2dff      	cmp	r5, #255	; 0xff
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0xbc>
 800030a:	e072      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	4662      	mov	r2, ip
 8000310:	04db      	lsls	r3, r3, #19
 8000312:	431a      	orrs	r2, r3
 8000314:	4694      	mov	ip, r2
 8000316:	281b      	cmp	r0, #27
 8000318:	dc00      	bgt.n	800031c <__aeabi_fadd+0xcc>
 800031a:	e090      	b.n	800043e <__aeabi_fadd+0x1ee>
 800031c:	2301      	movs	r3, #1
 800031e:	1afb      	subs	r3, r7, r3
 8000320:	015a      	lsls	r2, r3, #5
 8000322:	d551      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	099e      	lsrs	r6, r3, #6
 8000328:	0030      	movs	r0, r6
 800032a:	f000 fddb 	bl	8000ee4 <__clzsi2>
 800032e:	0033      	movs	r3, r6
 8000330:	3805      	subs	r0, #5
 8000332:	4083      	lsls	r3, r0
 8000334:	4285      	cmp	r5, r0
 8000336:	dc00      	bgt.n	800033a <__aeabi_fadd+0xea>
 8000338:	e075      	b.n	8000426 <__aeabi_fadd+0x1d6>
 800033a:	4a94      	ldr	r2, [pc, #592]	; (800058c <__aeabi_fadd+0x33c>)
 800033c:	1a2d      	subs	r5, r5, r0
 800033e:	4013      	ands	r3, r2
 8000340:	075a      	lsls	r2, r3, #29
 8000342:	d004      	beq.n	800034e <__aeabi_fadd+0xfe>
 8000344:	220f      	movs	r2, #15
 8000346:	401a      	ands	r2, r3
 8000348:	2a04      	cmp	r2, #4
 800034a:	d000      	beq.n	800034e <__aeabi_fadd+0xfe>
 800034c:	3304      	adds	r3, #4
 800034e:	015a      	lsls	r2, r3, #5
 8000350:	d53c      	bpl.n	80003cc <__aeabi_fadd+0x17c>
 8000352:	1c68      	adds	r0, r5, #1
 8000354:	2dfe      	cmp	r5, #254	; 0xfe
 8000356:	d02b      	beq.n	80003b0 <__aeabi_fadd+0x160>
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	0a5e      	lsrs	r6, r3, #9
 800035c:	b2c0      	uxtb	r0, r0
 800035e:	05c0      	lsls	r0, r0, #23
 8000360:	4330      	orrs	r0, r6
 8000362:	07e4      	lsls	r4, r4, #31
 8000364:	4320      	orrs	r0, r4
 8000366:	bcc0      	pop	{r6, r7}
 8000368:	46b9      	mov	r9, r7
 800036a:	46b0      	mov	r8, r6
 800036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036e:	20fe      	movs	r0, #254	; 0xfe
 8000370:	1c6a      	adds	r2, r5, #1
 8000372:	4210      	tst	r0, r2
 8000374:	d172      	bne.n	800045c <__aeabi_fadd+0x20c>
 8000376:	2d00      	cmp	r5, #0
 8000378:	d000      	beq.n	800037c <__aeabi_fadd+0x12c>
 800037a:	e0ae      	b.n	80004da <__aeabi_fadd+0x28a>
 800037c:	2f00      	cmp	r7, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x132>
 8000380:	e0ec      	b.n	800055c <__aeabi_fadd+0x30c>
 8000382:	4663      	mov	r3, ip
 8000384:	2000      	movs	r0, #0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0e9      	beq.n	800035e <__aeabi_fadd+0x10e>
 800038a:	1afb      	subs	r3, r7, r3
 800038c:	015a      	lsls	r2, r3, #5
 800038e:	d400      	bmi.n	8000392 <__aeabi_fadd+0x142>
 8000390:	e0f3      	b.n	800057a <__aeabi_fadd+0x32a>
 8000392:	4663      	mov	r3, ip
 8000394:	000c      	movs	r4, r1
 8000396:	1bdb      	subs	r3, r3, r7
 8000398:	e7d2      	b.n	8000340 <__aeabi_fadd+0xf0>
 800039a:	4661      	mov	r1, ip
 800039c:	2900      	cmp	r1, #0
 800039e:	d05b      	beq.n	8000458 <__aeabi_fadd+0x208>
 80003a0:	1e51      	subs	r1, r2, #1
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	d100      	bne.n	80003a8 <__aeabi_fadd+0x158>
 80003a6:	e0a7      	b.n	80004f8 <__aeabi_fadd+0x2a8>
 80003a8:	2aff      	cmp	r2, #255	; 0xff
 80003aa:	d022      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003ac:	000a      	movs	r2, r1
 80003ae:	e799      	b.n	80002e4 <__aeabi_fadd+0x94>
 80003b0:	20ff      	movs	r0, #255	; 0xff
 80003b2:	2600      	movs	r6, #0
 80003b4:	e7d3      	b.n	800035e <__aeabi_fadd+0x10e>
 80003b6:	21fe      	movs	r1, #254	; 0xfe
 80003b8:	1c6a      	adds	r2, r5, #1
 80003ba:	4211      	tst	r1, r2
 80003bc:	d073      	beq.n	80004a6 <__aeabi_fadd+0x256>
 80003be:	2aff      	cmp	r2, #255	; 0xff
 80003c0:	d0f6      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80003c2:	0015      	movs	r5, r2
 80003c4:	4467      	add	r7, ip
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	075a      	lsls	r2, r3, #29
 80003ca:	d1bb      	bne.n	8000344 <__aeabi_fadd+0xf4>
 80003cc:	08db      	lsrs	r3, r3, #3
 80003ce:	2dff      	cmp	r5, #255	; 0xff
 80003d0:	d00f      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003d2:	025b      	lsls	r3, r3, #9
 80003d4:	0a5e      	lsrs	r6, r3, #9
 80003d6:	b2e8      	uxtb	r0, r5
 80003d8:	e7c1      	b.n	800035e <__aeabi_fadd+0x10e>
 80003da:	4662      	mov	r2, ip
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d008      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	03d2      	lsls	r2, r2, #15
 80003e4:	4213      	tst	r3, r2
 80003e6:	d004      	beq.n	80003f2 <__aeabi_fadd+0x1a2>
 80003e8:	4640      	mov	r0, r8
 80003ea:	4210      	tst	r0, r2
 80003ec:	d101      	bne.n	80003f2 <__aeabi_fadd+0x1a2>
 80003ee:	000c      	movs	r4, r1
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0dc      	beq.n	80003b0 <__aeabi_fadd+0x160>
 80003f6:	2680      	movs	r6, #128	; 0x80
 80003f8:	03f6      	lsls	r6, r6, #15
 80003fa:	431e      	orrs	r6, r3
 80003fc:	0276      	lsls	r6, r6, #9
 80003fe:	20ff      	movs	r0, #255	; 0xff
 8000400:	0a76      	lsrs	r6, r6, #9
 8000402:	e7ac      	b.n	800035e <__aeabi_fadd+0x10e>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d0d6      	beq.n	80003b6 <__aeabi_fadd+0x166>
 8000408:	1b42      	subs	r2, r0, r5
 800040a:	2d00      	cmp	r5, #0
 800040c:	d05c      	beq.n	80004c8 <__aeabi_fadd+0x278>
 800040e:	28ff      	cmp	r0, #255	; 0xff
 8000410:	d0ee      	beq.n	80003f0 <__aeabi_fadd+0x1a0>
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	04db      	lsls	r3, r3, #19
 8000416:	431f      	orrs	r7, r3
 8000418:	2a1b      	cmp	r2, #27
 800041a:	dc00      	bgt.n	800041e <__aeabi_fadd+0x1ce>
 800041c:	e082      	b.n	8000524 <__aeabi_fadd+0x2d4>
 800041e:	2301      	movs	r3, #1
 8000420:	464d      	mov	r5, r9
 8000422:	4463      	add	r3, ip
 8000424:	e763      	b.n	80002ee <__aeabi_fadd+0x9e>
 8000426:	2220      	movs	r2, #32
 8000428:	1b40      	subs	r0, r0, r5
 800042a:	3001      	adds	r0, #1
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	0019      	movs	r1, r3
 8000430:	4093      	lsls	r3, r2
 8000432:	40c1      	lsrs	r1, r0
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	4193      	sbcs	r3, r2
 8000438:	2500      	movs	r5, #0
 800043a:	430b      	orrs	r3, r1
 800043c:	e780      	b.n	8000340 <__aeabi_fadd+0xf0>
 800043e:	2320      	movs	r3, #32
 8000440:	4661      	mov	r1, ip
 8000442:	1a1b      	subs	r3, r3, r0
 8000444:	4099      	lsls	r1, r3
 8000446:	4662      	mov	r2, ip
 8000448:	000b      	movs	r3, r1
 800044a:	40c2      	lsrs	r2, r0
 800044c:	1e59      	subs	r1, r3, #1
 800044e:	418b      	sbcs	r3, r1
 8000450:	4313      	orrs	r3, r2
 8000452:	e764      	b.n	800031e <__aeabi_fadd+0xce>
 8000454:	000c      	movs	r4, r1
 8000456:	4643      	mov	r3, r8
 8000458:	0015      	movs	r5, r2
 800045a:	e7b8      	b.n	80003ce <__aeabi_fadd+0x17e>
 800045c:	4663      	mov	r3, ip
 800045e:	1afe      	subs	r6, r7, r3
 8000460:	0173      	lsls	r3, r6, #5
 8000462:	d445      	bmi.n	80004f0 <__aeabi_fadd+0x2a0>
 8000464:	2e00      	cmp	r6, #0
 8000466:	d000      	beq.n	800046a <__aeabi_fadd+0x21a>
 8000468:	e75e      	b.n	8000328 <__aeabi_fadd+0xd8>
 800046a:	2400      	movs	r4, #0
 800046c:	2000      	movs	r0, #0
 800046e:	2600      	movs	r6, #0
 8000470:	e775      	b.n	800035e <__aeabi_fadd+0x10e>
 8000472:	2bff      	cmp	r3, #255	; 0xff
 8000474:	d0bb      	beq.n	80003ee <__aeabi_fadd+0x19e>
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	04db      	lsls	r3, r3, #19
 800047a:	431f      	orrs	r7, r3
 800047c:	2a1b      	cmp	r2, #27
 800047e:	dd47      	ble.n	8000510 <__aeabi_fadd+0x2c0>
 8000480:	2301      	movs	r3, #1
 8000482:	4662      	mov	r2, ip
 8000484:	000c      	movs	r4, r1
 8000486:	464d      	mov	r5, r9
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	e749      	b.n	8000320 <__aeabi_fadd+0xd0>
 800048c:	0005      	movs	r5, r0
 800048e:	e79e      	b.n	80003ce <__aeabi_fadd+0x17e>
 8000490:	4661      	mov	r1, ip
 8000492:	2320      	movs	r3, #32
 8000494:	40d1      	lsrs	r1, r2
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	4662      	mov	r2, ip
 800049a:	409a      	lsls	r2, r3
 800049c:	0013      	movs	r3, r2
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	4193      	sbcs	r3, r2
 80004a2:	430b      	orrs	r3, r1
 80004a4:	e722      	b.n	80002ec <__aeabi_fadd+0x9c>
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d146      	bne.n	8000538 <__aeabi_fadd+0x2e8>
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d062      	beq.n	8000574 <__aeabi_fadd+0x324>
 80004ae:	4663      	mov	r3, ip
 80004b0:	2000      	movs	r0, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d100      	bne.n	80004b8 <__aeabi_fadd+0x268>
 80004b6:	e752      	b.n	800035e <__aeabi_fadd+0x10e>
 80004b8:	003b      	movs	r3, r7
 80004ba:	4463      	add	r3, ip
 80004bc:	015a      	lsls	r2, r3, #5
 80004be:	d583      	bpl.n	80003c8 <__aeabi_fadd+0x178>
 80004c0:	4a32      	ldr	r2, [pc, #200]	; (800058c <__aeabi_fadd+0x33c>)
 80004c2:	3501      	adds	r5, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	e77f      	b.n	80003c8 <__aeabi_fadd+0x178>
 80004c8:	2f00      	cmp	r7, #0
 80004ca:	d0c4      	beq.n	8000456 <__aeabi_fadd+0x206>
 80004cc:	1e53      	subs	r3, r2, #1
 80004ce:	2a01      	cmp	r2, #1
 80004d0:	d012      	beq.n	80004f8 <__aeabi_fadd+0x2a8>
 80004d2:	2aff      	cmp	r2, #255	; 0xff
 80004d4:	d08c      	beq.n	80003f0 <__aeabi_fadd+0x1a0>
 80004d6:	001a      	movs	r2, r3
 80004d8:	e79e      	b.n	8000418 <__aeabi_fadd+0x1c8>
 80004da:	2f00      	cmp	r7, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_fadd+0x290>
 80004de:	e77c      	b.n	80003da <__aeabi_fadd+0x18a>
 80004e0:	4663      	mov	r3, ip
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d183      	bne.n	80003ee <__aeabi_fadd+0x19e>
 80004e6:	2680      	movs	r6, #128	; 0x80
 80004e8:	2400      	movs	r4, #0
 80004ea:	20ff      	movs	r0, #255	; 0xff
 80004ec:	03f6      	lsls	r6, r6, #15
 80004ee:	e736      	b.n	800035e <__aeabi_fadd+0x10e>
 80004f0:	4663      	mov	r3, ip
 80004f2:	000c      	movs	r4, r1
 80004f4:	1bde      	subs	r6, r3, r7
 80004f6:	e717      	b.n	8000328 <__aeabi_fadd+0xd8>
 80004f8:	003b      	movs	r3, r7
 80004fa:	4463      	add	r3, ip
 80004fc:	2501      	movs	r5, #1
 80004fe:	015a      	lsls	r2, r3, #5
 8000500:	d400      	bmi.n	8000504 <__aeabi_fadd+0x2b4>
 8000502:	e761      	b.n	80003c8 <__aeabi_fadd+0x178>
 8000504:	2502      	movs	r5, #2
 8000506:	e6f7      	b.n	80002f8 <__aeabi_fadd+0xa8>
 8000508:	4663      	mov	r3, ip
 800050a:	2501      	movs	r5, #1
 800050c:	1afb      	subs	r3, r7, r3
 800050e:	e707      	b.n	8000320 <__aeabi_fadd+0xd0>
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	0038      	movs	r0, r7
 8000516:	409f      	lsls	r7, r3
 8000518:	003b      	movs	r3, r7
 800051a:	40d0      	lsrs	r0, r2
 800051c:	1e5a      	subs	r2, r3, #1
 800051e:	4193      	sbcs	r3, r2
 8000520:	4303      	orrs	r3, r0
 8000522:	e7ae      	b.n	8000482 <__aeabi_fadd+0x232>
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	0039      	movs	r1, r7
 800052a:	409f      	lsls	r7, r3
 800052c:	003b      	movs	r3, r7
 800052e:	40d1      	lsrs	r1, r2
 8000530:	1e5a      	subs	r2, r3, #1
 8000532:	4193      	sbcs	r3, r2
 8000534:	430b      	orrs	r3, r1
 8000536:	e773      	b.n	8000420 <__aeabi_fadd+0x1d0>
 8000538:	2f00      	cmp	r7, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x2ee>
 800053c:	e758      	b.n	80003f0 <__aeabi_fadd+0x1a0>
 800053e:	4662      	mov	r2, ip
 8000540:	2a00      	cmp	r2, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x2f6>
 8000544:	e755      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	03d2      	lsls	r2, r2, #15
 800054a:	4213      	tst	r3, r2
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x300>
 800054e:	e750      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000550:	4641      	mov	r1, r8
 8000552:	4211      	tst	r1, r2
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x308>
 8000556:	e74c      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 8000558:	4643      	mov	r3, r8
 800055a:	e74a      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 800055c:	4663      	mov	r3, ip
 800055e:	2b00      	cmp	r3, #0
 8000560:	d083      	beq.n	800046a <__aeabi_fadd+0x21a>
 8000562:	000c      	movs	r4, r1
 8000564:	4646      	mov	r6, r8
 8000566:	2000      	movs	r0, #0
 8000568:	e6f9      	b.n	800035e <__aeabi_fadd+0x10e>
 800056a:	4663      	mov	r3, ip
 800056c:	000c      	movs	r4, r1
 800056e:	1bdb      	subs	r3, r3, r7
 8000570:	3501      	adds	r5, #1
 8000572:	e6d5      	b.n	8000320 <__aeabi_fadd+0xd0>
 8000574:	4646      	mov	r6, r8
 8000576:	2000      	movs	r0, #0
 8000578:	e6f1      	b.n	800035e <__aeabi_fadd+0x10e>
 800057a:	2b00      	cmp	r3, #0
 800057c:	d000      	beq.n	8000580 <__aeabi_fadd+0x330>
 800057e:	e723      	b.n	80003c8 <__aeabi_fadd+0x178>
 8000580:	2400      	movs	r4, #0
 8000582:	2600      	movs	r6, #0
 8000584:	e6eb      	b.n	800035e <__aeabi_fadd+0x10e>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	7dffffff 	.word	0x7dffffff
 800058c:	fbffffff 	.word	0xfbffffff

08000590 <__aeabi_fdiv>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464f      	mov	r7, r9
 8000594:	4646      	mov	r6, r8
 8000596:	46d6      	mov	lr, sl
 8000598:	0245      	lsls	r5, r0, #9
 800059a:	b5c0      	push	{r6, r7, lr}
 800059c:	0047      	lsls	r7, r0, #1
 800059e:	1c0c      	adds	r4, r1, #0
 80005a0:	0a6d      	lsrs	r5, r5, #9
 80005a2:	0e3f      	lsrs	r7, r7, #24
 80005a4:	0fc6      	lsrs	r6, r0, #31
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fdiv+0x1c>
 80005aa:	e06f      	b.n	800068c <__aeabi_fdiv+0xfc>
 80005ac:	2fff      	cmp	r7, #255	; 0xff
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fdiv+0x22>
 80005b0:	e074      	b.n	800069c <__aeabi_fdiv+0x10c>
 80005b2:	2300      	movs	r3, #0
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	4699      	mov	r9, r3
 80005b8:	469a      	mov	sl, r3
 80005ba:	00ed      	lsls	r5, r5, #3
 80005bc:	04d2      	lsls	r2, r2, #19
 80005be:	4315      	orrs	r5, r2
 80005c0:	3f7f      	subs	r7, #127	; 0x7f
 80005c2:	0263      	lsls	r3, r4, #9
 80005c4:	0a5b      	lsrs	r3, r3, #9
 80005c6:	4698      	mov	r8, r3
 80005c8:	0063      	lsls	r3, r4, #1
 80005ca:	0e1b      	lsrs	r3, r3, #24
 80005cc:	0fe4      	lsrs	r4, r4, #31
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d04d      	beq.n	800066e <__aeabi_fdiv+0xde>
 80005d2:	2bff      	cmp	r3, #255	; 0xff
 80005d4:	d045      	beq.n	8000662 <__aeabi_fdiv+0xd2>
 80005d6:	4642      	mov	r2, r8
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	00d2      	lsls	r2, r2, #3
 80005dc:	04c9      	lsls	r1, r1, #19
 80005de:	4311      	orrs	r1, r2
 80005e0:	4688      	mov	r8, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	3b7f      	subs	r3, #127	; 0x7f
 80005e6:	0031      	movs	r1, r6
 80005e8:	1aff      	subs	r7, r7, r3
 80005ea:	464b      	mov	r3, r9
 80005ec:	4061      	eors	r1, r4
 80005ee:	b2c9      	uxtb	r1, r1
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d900      	bls.n	80005f6 <__aeabi_fdiv+0x66>
 80005f4:	e0b8      	b.n	8000768 <__aeabi_fdiv+0x1d8>
 80005f6:	4870      	ldr	r0, [pc, #448]	; (80007b8 <__aeabi_fdiv+0x228>)
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	58c3      	ldr	r3, [r0, r3]
 80005fc:	469f      	mov	pc, r3
 80005fe:	2300      	movs	r3, #0
 8000600:	4698      	mov	r8, r3
 8000602:	0026      	movs	r6, r4
 8000604:	4645      	mov	r5, r8
 8000606:	4692      	mov	sl, r2
 8000608:	4653      	mov	r3, sl
 800060a:	2b02      	cmp	r3, #2
 800060c:	d100      	bne.n	8000610 <__aeabi_fdiv+0x80>
 800060e:	e08d      	b.n	800072c <__aeabi_fdiv+0x19c>
 8000610:	2b03      	cmp	r3, #3
 8000612:	d100      	bne.n	8000616 <__aeabi_fdiv+0x86>
 8000614:	e0a1      	b.n	800075a <__aeabi_fdiv+0x1ca>
 8000616:	2b01      	cmp	r3, #1
 8000618:	d018      	beq.n	800064c <__aeabi_fdiv+0xbc>
 800061a:	003b      	movs	r3, r7
 800061c:	337f      	adds	r3, #127	; 0x7f
 800061e:	2b00      	cmp	r3, #0
 8000620:	dd6d      	ble.n	80006fe <__aeabi_fdiv+0x16e>
 8000622:	076a      	lsls	r2, r5, #29
 8000624:	d004      	beq.n	8000630 <__aeabi_fdiv+0xa0>
 8000626:	220f      	movs	r2, #15
 8000628:	402a      	ands	r2, r5
 800062a:	2a04      	cmp	r2, #4
 800062c:	d000      	beq.n	8000630 <__aeabi_fdiv+0xa0>
 800062e:	3504      	adds	r5, #4
 8000630:	012a      	lsls	r2, r5, #4
 8000632:	d503      	bpl.n	800063c <__aeabi_fdiv+0xac>
 8000634:	4b61      	ldr	r3, [pc, #388]	; (80007bc <__aeabi_fdiv+0x22c>)
 8000636:	401d      	ands	r5, r3
 8000638:	003b      	movs	r3, r7
 800063a:	3380      	adds	r3, #128	; 0x80
 800063c:	2bfe      	cmp	r3, #254	; 0xfe
 800063e:	dd00      	ble.n	8000642 <__aeabi_fdiv+0xb2>
 8000640:	e074      	b.n	800072c <__aeabi_fdiv+0x19c>
 8000642:	01aa      	lsls	r2, r5, #6
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	b2d8      	uxtb	r0, r3
 8000648:	e002      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800064a:	000e      	movs	r6, r1
 800064c:	2000      	movs	r0, #0
 800064e:	2200      	movs	r2, #0
 8000650:	05c0      	lsls	r0, r0, #23
 8000652:	07f6      	lsls	r6, r6, #31
 8000654:	4310      	orrs	r0, r2
 8000656:	4330      	orrs	r0, r6
 8000658:	bce0      	pop	{r5, r6, r7}
 800065a:	46ba      	mov	sl, r7
 800065c:	46b1      	mov	r9, r6
 800065e:	46a8      	mov	r8, r5
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000662:	4643      	mov	r3, r8
 8000664:	2b00      	cmp	r3, #0
 8000666:	d13f      	bne.n	80006e8 <__aeabi_fdiv+0x158>
 8000668:	2202      	movs	r2, #2
 800066a:	3fff      	subs	r7, #255	; 0xff
 800066c:	e003      	b.n	8000676 <__aeabi_fdiv+0xe6>
 800066e:	4643      	mov	r3, r8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d12d      	bne.n	80006d0 <__aeabi_fdiv+0x140>
 8000674:	2201      	movs	r2, #1
 8000676:	0031      	movs	r1, r6
 8000678:	464b      	mov	r3, r9
 800067a:	4061      	eors	r1, r4
 800067c:	b2c9      	uxtb	r1, r1
 800067e:	4313      	orrs	r3, r2
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d838      	bhi.n	80006f6 <__aeabi_fdiv+0x166>
 8000684:	484e      	ldr	r0, [pc, #312]	; (80007c0 <__aeabi_fdiv+0x230>)
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	58c3      	ldr	r3, [r0, r3]
 800068a:	469f      	mov	pc, r3
 800068c:	2d00      	cmp	r5, #0
 800068e:	d113      	bne.n	80006b8 <__aeabi_fdiv+0x128>
 8000690:	2304      	movs	r3, #4
 8000692:	4699      	mov	r9, r3
 8000694:	3b03      	subs	r3, #3
 8000696:	2700      	movs	r7, #0
 8000698:	469a      	mov	sl, r3
 800069a:	e792      	b.n	80005c2 <__aeabi_fdiv+0x32>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d105      	bne.n	80006ac <__aeabi_fdiv+0x11c>
 80006a0:	2308      	movs	r3, #8
 80006a2:	4699      	mov	r9, r3
 80006a4:	3b06      	subs	r3, #6
 80006a6:	27ff      	movs	r7, #255	; 0xff
 80006a8:	469a      	mov	sl, r3
 80006aa:	e78a      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006ac:	230c      	movs	r3, #12
 80006ae:	4699      	mov	r9, r3
 80006b0:	3b09      	subs	r3, #9
 80006b2:	27ff      	movs	r7, #255	; 0xff
 80006b4:	469a      	mov	sl, r3
 80006b6:	e784      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006b8:	0028      	movs	r0, r5
 80006ba:	f000 fc13 	bl	8000ee4 <__clzsi2>
 80006be:	2776      	movs	r7, #118	; 0x76
 80006c0:	1f43      	subs	r3, r0, #5
 80006c2:	409d      	lsls	r5, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	427f      	negs	r7, r7
 80006c8:	4699      	mov	r9, r3
 80006ca:	469a      	mov	sl, r3
 80006cc:	1a3f      	subs	r7, r7, r0
 80006ce:	e778      	b.n	80005c2 <__aeabi_fdiv+0x32>
 80006d0:	4640      	mov	r0, r8
 80006d2:	f000 fc07 	bl	8000ee4 <__clzsi2>
 80006d6:	4642      	mov	r2, r8
 80006d8:	1f43      	subs	r3, r0, #5
 80006da:	409a      	lsls	r2, r3
 80006dc:	2376      	movs	r3, #118	; 0x76
 80006de:	425b      	negs	r3, r3
 80006e0:	4690      	mov	r8, r2
 80006e2:	1a1b      	subs	r3, r3, r0
 80006e4:	2200      	movs	r2, #0
 80006e6:	e77e      	b.n	80005e6 <__aeabi_fdiv+0x56>
 80006e8:	2303      	movs	r3, #3
 80006ea:	464a      	mov	r2, r9
 80006ec:	431a      	orrs	r2, r3
 80006ee:	4691      	mov	r9, r2
 80006f0:	33fc      	adds	r3, #252	; 0xfc
 80006f2:	2203      	movs	r2, #3
 80006f4:	e777      	b.n	80005e6 <__aeabi_fdiv+0x56>
 80006f6:	000e      	movs	r6, r1
 80006f8:	20ff      	movs	r0, #255	; 0xff
 80006fa:	2200      	movs	r2, #0
 80006fc:	e7a8      	b.n	8000650 <__aeabi_fdiv+0xc0>
 80006fe:	2201      	movs	r2, #1
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b1b      	cmp	r3, #27
 8000704:	dca2      	bgt.n	800064c <__aeabi_fdiv+0xbc>
 8000706:	379e      	adds	r7, #158	; 0x9e
 8000708:	002a      	movs	r2, r5
 800070a:	40bd      	lsls	r5, r7
 800070c:	40da      	lsrs	r2, r3
 800070e:	1e6b      	subs	r3, r5, #1
 8000710:	419d      	sbcs	r5, r3
 8000712:	4315      	orrs	r5, r2
 8000714:	076a      	lsls	r2, r5, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_fdiv+0x192>
 8000718:	220f      	movs	r2, #15
 800071a:	402a      	ands	r2, r5
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_fdiv+0x192>
 8000720:	3504      	adds	r5, #4
 8000722:	016a      	lsls	r2, r5, #5
 8000724:	d544      	bpl.n	80007b0 <__aeabi_fdiv+0x220>
 8000726:	2001      	movs	r0, #1
 8000728:	2200      	movs	r2, #0
 800072a:	e791      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	2200      	movs	r2, #0
 8000730:	e78e      	b.n	8000650 <__aeabi_fdiv+0xc0>
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	2600      	movs	r6, #0
 8000736:	20ff      	movs	r0, #255	; 0xff
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	e789      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800073c:	2300      	movs	r3, #0
 800073e:	4698      	mov	r8, r3
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	03d2      	lsls	r2, r2, #15
 8000744:	4215      	tst	r5, r2
 8000746:	d008      	beq.n	800075a <__aeabi_fdiv+0x1ca>
 8000748:	4643      	mov	r3, r8
 800074a:	4213      	tst	r3, r2
 800074c:	d105      	bne.n	800075a <__aeabi_fdiv+0x1ca>
 800074e:	431a      	orrs	r2, r3
 8000750:	0252      	lsls	r2, r2, #9
 8000752:	0026      	movs	r6, r4
 8000754:	20ff      	movs	r0, #255	; 0xff
 8000756:	0a52      	lsrs	r2, r2, #9
 8000758:	e77a      	b.n	8000650 <__aeabi_fdiv+0xc0>
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	432a      	orrs	r2, r5
 8000760:	0252      	lsls	r2, r2, #9
 8000762:	20ff      	movs	r0, #255	; 0xff
 8000764:	0a52      	lsrs	r2, r2, #9
 8000766:	e773      	b.n	8000650 <__aeabi_fdiv+0xc0>
 8000768:	4642      	mov	r2, r8
 800076a:	016b      	lsls	r3, r5, #5
 800076c:	0155      	lsls	r5, r2, #5
 800076e:	42ab      	cmp	r3, r5
 8000770:	d21a      	bcs.n	80007a8 <__aeabi_fdiv+0x218>
 8000772:	201b      	movs	r0, #27
 8000774:	2200      	movs	r2, #0
 8000776:	3f01      	subs	r7, #1
 8000778:	2601      	movs	r6, #1
 800077a:	001c      	movs	r4, r3
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	2c00      	cmp	r4, #0
 8000782:	db01      	blt.n	8000788 <__aeabi_fdiv+0x1f8>
 8000784:	429d      	cmp	r5, r3
 8000786:	d801      	bhi.n	800078c <__aeabi_fdiv+0x1fc>
 8000788:	1b5b      	subs	r3, r3, r5
 800078a:	4332      	orrs	r2, r6
 800078c:	3801      	subs	r0, #1
 800078e:	2800      	cmp	r0, #0
 8000790:	d1f3      	bne.n	800077a <__aeabi_fdiv+0x1ea>
 8000792:	1e58      	subs	r0, r3, #1
 8000794:	4183      	sbcs	r3, r0
 8000796:	4313      	orrs	r3, r2
 8000798:	001d      	movs	r5, r3
 800079a:	003b      	movs	r3, r7
 800079c:	337f      	adds	r3, #127	; 0x7f
 800079e:	000e      	movs	r6, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_fdiv+0x216>
 80007a4:	e73d      	b.n	8000622 <__aeabi_fdiv+0x92>
 80007a6:	e7aa      	b.n	80006fe <__aeabi_fdiv+0x16e>
 80007a8:	201a      	movs	r0, #26
 80007aa:	2201      	movs	r2, #1
 80007ac:	1b5b      	subs	r3, r3, r5
 80007ae:	e7e3      	b.n	8000778 <__aeabi_fdiv+0x1e8>
 80007b0:	01aa      	lsls	r2, r5, #6
 80007b2:	2000      	movs	r0, #0
 80007b4:	0a52      	lsrs	r2, r2, #9
 80007b6:	e74b      	b.n	8000650 <__aeabi_fdiv+0xc0>
 80007b8:	080048b8 	.word	0x080048b8
 80007bc:	f7ffffff 	.word	0xf7ffffff
 80007c0:	080048f8 	.word	0x080048f8

080007c4 <__aeabi_fmul>:
 80007c4:	0243      	lsls	r3, r0, #9
 80007c6:	0a5b      	lsrs	r3, r3, #9
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	464f      	mov	r7, r9
 80007cc:	4646      	mov	r6, r8
 80007ce:	4699      	mov	r9, r3
 80007d0:	46d6      	mov	lr, sl
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0045      	lsls	r5, r0, #1
 80007d6:	4698      	mov	r8, r3
 80007d8:	b5c0      	push	{r6, r7, lr}
 80007da:	464b      	mov	r3, r9
 80007dc:	1c0f      	adds	r7, r1, #0
 80007de:	0e2d      	lsrs	r5, r5, #24
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fmul+0x20>
 80007e2:	e0cb      	b.n	800097c <__aeabi_fmul+0x1b8>
 80007e4:	2dff      	cmp	r5, #255	; 0xff
 80007e6:	d100      	bne.n	80007ea <__aeabi_fmul+0x26>
 80007e8:	e0cf      	b.n	800098a <__aeabi_fmul+0x1c6>
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	04d2      	lsls	r2, r2, #19
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2300      	movs	r3, #0
 80007f4:	4691      	mov	r9, r2
 80007f6:	2600      	movs	r6, #0
 80007f8:	469a      	mov	sl, r3
 80007fa:	3d7f      	subs	r5, #127	; 0x7f
 80007fc:	027c      	lsls	r4, r7, #9
 80007fe:	007b      	lsls	r3, r7, #1
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	0e1b      	lsrs	r3, r3, #24
 8000804:	0fff      	lsrs	r7, r7, #31
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fmul+0x48>
 800080a:	e0a9      	b.n	8000960 <__aeabi_fmul+0x19c>
 800080c:	2bff      	cmp	r3, #255	; 0xff
 800080e:	d011      	beq.n	8000834 <__aeabi_fmul+0x70>
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	00e4      	lsls	r4, r4, #3
 8000814:	04d2      	lsls	r2, r2, #19
 8000816:	4314      	orrs	r4, r2
 8000818:	4642      	mov	r2, r8
 800081a:	3b7f      	subs	r3, #127	; 0x7f
 800081c:	195b      	adds	r3, r3, r5
 800081e:	407a      	eors	r2, r7
 8000820:	2000      	movs	r0, #0
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	1c5d      	adds	r5, r3, #1
 8000826:	2e0a      	cmp	r6, #10
 8000828:	dd13      	ble.n	8000852 <__aeabi_fmul+0x8e>
 800082a:	003a      	movs	r2, r7
 800082c:	2e0b      	cmp	r6, #11
 800082e:	d047      	beq.n	80008c0 <__aeabi_fmul+0xfc>
 8000830:	4647      	mov	r7, r8
 8000832:	e03f      	b.n	80008b4 <__aeabi_fmul+0xf0>
 8000834:	002b      	movs	r3, r5
 8000836:	33ff      	adds	r3, #255	; 0xff
 8000838:	2c00      	cmp	r4, #0
 800083a:	d11e      	bne.n	800087a <__aeabi_fmul+0xb6>
 800083c:	2202      	movs	r2, #2
 800083e:	4316      	orrs	r6, r2
 8000840:	4642      	mov	r2, r8
 8000842:	3501      	adds	r5, #1
 8000844:	407a      	eors	r2, r7
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	35ff      	adds	r5, #255	; 0xff
 800084a:	2e0a      	cmp	r6, #10
 800084c:	dd00      	ble.n	8000850 <__aeabi_fmul+0x8c>
 800084e:	e0e4      	b.n	8000a1a <__aeabi_fmul+0x256>
 8000850:	2002      	movs	r0, #2
 8000852:	2e02      	cmp	r6, #2
 8000854:	dc1c      	bgt.n	8000890 <__aeabi_fmul+0xcc>
 8000856:	3e01      	subs	r6, #1
 8000858:	2e01      	cmp	r6, #1
 800085a:	d842      	bhi.n	80008e2 <__aeabi_fmul+0x11e>
 800085c:	2802      	cmp	r0, #2
 800085e:	d03d      	beq.n	80008dc <__aeabi_fmul+0x118>
 8000860:	2801      	cmp	r0, #1
 8000862:	d166      	bne.n	8000932 <__aeabi_fmul+0x16e>
 8000864:	2000      	movs	r0, #0
 8000866:	2100      	movs	r1, #0
 8000868:	05c0      	lsls	r0, r0, #23
 800086a:	4308      	orrs	r0, r1
 800086c:	07d2      	lsls	r2, r2, #31
 800086e:	4310      	orrs	r0, r2
 8000870:	bce0      	pop	{r5, r6, r7}
 8000872:	46ba      	mov	sl, r7
 8000874:	46b1      	mov	r9, r6
 8000876:	46a8      	mov	r8, r5
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	2203      	movs	r2, #3
 800087c:	4316      	orrs	r6, r2
 800087e:	4642      	mov	r2, r8
 8000880:	3501      	adds	r5, #1
 8000882:	407a      	eors	r2, r7
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	35ff      	adds	r5, #255	; 0xff
 8000888:	2e0a      	cmp	r6, #10
 800088a:	dd00      	ble.n	800088e <__aeabi_fmul+0xca>
 800088c:	e0e4      	b.n	8000a58 <__aeabi_fmul+0x294>
 800088e:	2003      	movs	r0, #3
 8000890:	2101      	movs	r1, #1
 8000892:	40b1      	lsls	r1, r6
 8000894:	26a6      	movs	r6, #166	; 0xa6
 8000896:	00f6      	lsls	r6, r6, #3
 8000898:	4231      	tst	r1, r6
 800089a:	d10a      	bne.n	80008b2 <__aeabi_fmul+0xee>
 800089c:	2690      	movs	r6, #144	; 0x90
 800089e:	00b6      	lsls	r6, r6, #2
 80008a0:	4231      	tst	r1, r6
 80008a2:	d116      	bne.n	80008d2 <__aeabi_fmul+0x10e>
 80008a4:	3eb9      	subs	r6, #185	; 0xb9
 80008a6:	3eff      	subs	r6, #255	; 0xff
 80008a8:	420e      	tst	r6, r1
 80008aa:	d01a      	beq.n	80008e2 <__aeabi_fmul+0x11e>
 80008ac:	46a1      	mov	r9, r4
 80008ae:	4682      	mov	sl, r0
 80008b0:	e000      	b.n	80008b4 <__aeabi_fmul+0xf0>
 80008b2:	0017      	movs	r7, r2
 80008b4:	4653      	mov	r3, sl
 80008b6:	003a      	movs	r2, r7
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d00f      	beq.n	80008dc <__aeabi_fmul+0x118>
 80008bc:	464c      	mov	r4, r9
 80008be:	4650      	mov	r0, sl
 80008c0:	2803      	cmp	r0, #3
 80008c2:	d1cd      	bne.n	8000860 <__aeabi_fmul+0x9c>
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	03c9      	lsls	r1, r1, #15
 80008c8:	4321      	orrs	r1, r4
 80008ca:	0249      	lsls	r1, r1, #9
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	0a49      	lsrs	r1, r1, #9
 80008d0:	e7ca      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	2200      	movs	r2, #0
 80008d6:	20ff      	movs	r0, #255	; 0xff
 80008d8:	03c9      	lsls	r1, r1, #15
 80008da:	e7c5      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	2100      	movs	r1, #0
 80008e0:	e7c2      	b.n	8000868 <__aeabi_fmul+0xa4>
 80008e2:	0c20      	lsrs	r0, r4, #16
 80008e4:	4649      	mov	r1, r9
 80008e6:	0424      	lsls	r4, r4, #16
 80008e8:	0c24      	lsrs	r4, r4, #16
 80008ea:	0027      	movs	r7, r4
 80008ec:	0c0e      	lsrs	r6, r1, #16
 80008ee:	0409      	lsls	r1, r1, #16
 80008f0:	0c09      	lsrs	r1, r1, #16
 80008f2:	4374      	muls	r4, r6
 80008f4:	434f      	muls	r7, r1
 80008f6:	4346      	muls	r6, r0
 80008f8:	4348      	muls	r0, r1
 80008fa:	0c39      	lsrs	r1, r7, #16
 80008fc:	1900      	adds	r0, r0, r4
 80008fe:	1809      	adds	r1, r1, r0
 8000900:	428c      	cmp	r4, r1
 8000902:	d903      	bls.n	800090c <__aeabi_fmul+0x148>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	0240      	lsls	r0, r0, #9
 8000908:	4684      	mov	ip, r0
 800090a:	4466      	add	r6, ip
 800090c:	043f      	lsls	r7, r7, #16
 800090e:	0408      	lsls	r0, r1, #16
 8000910:	0c3f      	lsrs	r7, r7, #16
 8000912:	19c0      	adds	r0, r0, r7
 8000914:	0184      	lsls	r4, r0, #6
 8000916:	1e67      	subs	r7, r4, #1
 8000918:	41bc      	sbcs	r4, r7
 800091a:	0c09      	lsrs	r1, r1, #16
 800091c:	0e80      	lsrs	r0, r0, #26
 800091e:	1989      	adds	r1, r1, r6
 8000920:	4304      	orrs	r4, r0
 8000922:	0189      	lsls	r1, r1, #6
 8000924:	430c      	orrs	r4, r1
 8000926:	0109      	lsls	r1, r1, #4
 8000928:	d571      	bpl.n	8000a0e <__aeabi_fmul+0x24a>
 800092a:	2301      	movs	r3, #1
 800092c:	0861      	lsrs	r1, r4, #1
 800092e:	401c      	ands	r4, r3
 8000930:	430c      	orrs	r4, r1
 8000932:	002b      	movs	r3, r5
 8000934:	337f      	adds	r3, #127	; 0x7f
 8000936:	2b00      	cmp	r3, #0
 8000938:	dd51      	ble.n	80009de <__aeabi_fmul+0x21a>
 800093a:	0761      	lsls	r1, r4, #29
 800093c:	d004      	beq.n	8000948 <__aeabi_fmul+0x184>
 800093e:	210f      	movs	r1, #15
 8000940:	4021      	ands	r1, r4
 8000942:	2904      	cmp	r1, #4
 8000944:	d000      	beq.n	8000948 <__aeabi_fmul+0x184>
 8000946:	3404      	adds	r4, #4
 8000948:	0121      	lsls	r1, r4, #4
 800094a:	d503      	bpl.n	8000954 <__aeabi_fmul+0x190>
 800094c:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <__aeabi_fmul+0x298>)
 800094e:	401c      	ands	r4, r3
 8000950:	002b      	movs	r3, r5
 8000952:	3380      	adds	r3, #128	; 0x80
 8000954:	2bfe      	cmp	r3, #254	; 0xfe
 8000956:	dcc1      	bgt.n	80008dc <__aeabi_fmul+0x118>
 8000958:	01a1      	lsls	r1, r4, #6
 800095a:	0a49      	lsrs	r1, r1, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e783      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000960:	2c00      	cmp	r4, #0
 8000962:	d12c      	bne.n	80009be <__aeabi_fmul+0x1fa>
 8000964:	2301      	movs	r3, #1
 8000966:	4642      	mov	r2, r8
 8000968:	431e      	orrs	r6, r3
 800096a:	002b      	movs	r3, r5
 800096c:	407a      	eors	r2, r7
 800096e:	2001      	movs	r0, #1
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	1c5d      	adds	r5, r3, #1
 8000974:	2e0a      	cmp	r6, #10
 8000976:	dd00      	ble.n	800097a <__aeabi_fmul+0x1b6>
 8000978:	e757      	b.n	800082a <__aeabi_fmul+0x66>
 800097a:	e76a      	b.n	8000852 <__aeabi_fmul+0x8e>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d110      	bne.n	80009a2 <__aeabi_fmul+0x1de>
 8000980:	2301      	movs	r3, #1
 8000982:	2604      	movs	r6, #4
 8000984:	2500      	movs	r5, #0
 8000986:	469a      	mov	sl, r3
 8000988:	e738      	b.n	80007fc <__aeabi_fmul+0x38>
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <__aeabi_fmul+0x1d4>
 800098e:	2302      	movs	r3, #2
 8000990:	2608      	movs	r6, #8
 8000992:	25ff      	movs	r5, #255	; 0xff
 8000994:	469a      	mov	sl, r3
 8000996:	e731      	b.n	80007fc <__aeabi_fmul+0x38>
 8000998:	2303      	movs	r3, #3
 800099a:	260c      	movs	r6, #12
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	469a      	mov	sl, r3
 80009a0:	e72c      	b.n	80007fc <__aeabi_fmul+0x38>
 80009a2:	4648      	mov	r0, r9
 80009a4:	f000 fa9e 	bl	8000ee4 <__clzsi2>
 80009a8:	464a      	mov	r2, r9
 80009aa:	1f43      	subs	r3, r0, #5
 80009ac:	2576      	movs	r5, #118	; 0x76
 80009ae:	409a      	lsls	r2, r3
 80009b0:	2300      	movs	r3, #0
 80009b2:	426d      	negs	r5, r5
 80009b4:	4691      	mov	r9, r2
 80009b6:	2600      	movs	r6, #0
 80009b8:	469a      	mov	sl, r3
 80009ba:	1a2d      	subs	r5, r5, r0
 80009bc:	e71e      	b.n	80007fc <__aeabi_fmul+0x38>
 80009be:	0020      	movs	r0, r4
 80009c0:	f000 fa90 	bl	8000ee4 <__clzsi2>
 80009c4:	4642      	mov	r2, r8
 80009c6:	1f43      	subs	r3, r0, #5
 80009c8:	409c      	lsls	r4, r3
 80009ca:	1a2b      	subs	r3, r5, r0
 80009cc:	3b76      	subs	r3, #118	; 0x76
 80009ce:	407a      	eors	r2, r7
 80009d0:	2000      	movs	r0, #0
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	1c5d      	adds	r5, r3, #1
 80009d6:	2e0a      	cmp	r6, #10
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fmul+0x218>
 80009da:	e726      	b.n	800082a <__aeabi_fmul+0x66>
 80009dc:	e739      	b.n	8000852 <__aeabi_fmul+0x8e>
 80009de:	2101      	movs	r1, #1
 80009e0:	1acb      	subs	r3, r1, r3
 80009e2:	2b1b      	cmp	r3, #27
 80009e4:	dd00      	ble.n	80009e8 <__aeabi_fmul+0x224>
 80009e6:	e73d      	b.n	8000864 <__aeabi_fmul+0xa0>
 80009e8:	359e      	adds	r5, #158	; 0x9e
 80009ea:	0021      	movs	r1, r4
 80009ec:	40ac      	lsls	r4, r5
 80009ee:	40d9      	lsrs	r1, r3
 80009f0:	1e63      	subs	r3, r4, #1
 80009f2:	419c      	sbcs	r4, r3
 80009f4:	4321      	orrs	r1, r4
 80009f6:	074b      	lsls	r3, r1, #29
 80009f8:	d004      	beq.n	8000a04 <__aeabi_fmul+0x240>
 80009fa:	230f      	movs	r3, #15
 80009fc:	400b      	ands	r3, r1
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d000      	beq.n	8000a04 <__aeabi_fmul+0x240>
 8000a02:	3104      	adds	r1, #4
 8000a04:	014b      	lsls	r3, r1, #5
 8000a06:	d504      	bpl.n	8000a12 <__aeabi_fmul+0x24e>
 8000a08:	2001      	movs	r0, #1
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	e72c      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a0e:	001d      	movs	r5, r3
 8000a10:	e78f      	b.n	8000932 <__aeabi_fmul+0x16e>
 8000a12:	0189      	lsls	r1, r1, #6
 8000a14:	2000      	movs	r0, #0
 8000a16:	0a49      	lsrs	r1, r1, #9
 8000a18:	e726      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	2e0f      	cmp	r6, #15
 8000a1e:	d10c      	bne.n	8000a3a <__aeabi_fmul+0x276>
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	464b      	mov	r3, r9
 8000a24:	03c9      	lsls	r1, r1, #15
 8000a26:	420b      	tst	r3, r1
 8000a28:	d00d      	beq.n	8000a46 <__aeabi_fmul+0x282>
 8000a2a:	420c      	tst	r4, r1
 8000a2c:	d10b      	bne.n	8000a46 <__aeabi_fmul+0x282>
 8000a2e:	4321      	orrs	r1, r4
 8000a30:	0249      	lsls	r1, r1, #9
 8000a32:	003a      	movs	r2, r7
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a49      	lsrs	r1, r1, #9
 8000a38:	e716      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a3a:	2e0b      	cmp	r6, #11
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fmul+0x27c>
 8000a3e:	e6f7      	b.n	8000830 <__aeabi_fmul+0x6c>
 8000a40:	46a1      	mov	r9, r4
 8000a42:	469a      	mov	sl, r3
 8000a44:	e736      	b.n	80008b4 <__aeabi_fmul+0xf0>
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	464b      	mov	r3, r9
 8000a4a:	03c9      	lsls	r1, r1, #15
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	0249      	lsls	r1, r1, #9
 8000a50:	4642      	mov	r2, r8
 8000a52:	20ff      	movs	r0, #255	; 0xff
 8000a54:	0a49      	lsrs	r1, r1, #9
 8000a56:	e707      	b.n	8000868 <__aeabi_fmul+0xa4>
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e7df      	b.n	8000a1c <__aeabi_fmul+0x258>
 8000a5c:	f7ffffff 	.word	0xf7ffffff

08000a60 <__aeabi_fsub>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	46c6      	mov	lr, r8
 8000a64:	0243      	lsls	r3, r0, #9
 8000a66:	0a5b      	lsrs	r3, r3, #9
 8000a68:	0045      	lsls	r5, r0, #1
 8000a6a:	00da      	lsls	r2, r3, #3
 8000a6c:	0fc4      	lsrs	r4, r0, #31
 8000a6e:	0248      	lsls	r0, r1, #9
 8000a70:	004f      	lsls	r7, r1, #1
 8000a72:	4694      	mov	ip, r2
 8000a74:	0a42      	lsrs	r2, r0, #9
 8000a76:	001e      	movs	r6, r3
 8000a78:	4690      	mov	r8, r2
 8000a7a:	b500      	push	{lr}
 8000a7c:	0e2d      	lsrs	r5, r5, #24
 8000a7e:	0e3f      	lsrs	r7, r7, #24
 8000a80:	0fc9      	lsrs	r1, r1, #31
 8000a82:	0980      	lsrs	r0, r0, #6
 8000a84:	2fff      	cmp	r7, #255	; 0xff
 8000a86:	d059      	beq.n	8000b3c <__aeabi_fsub+0xdc>
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4051      	eors	r1, r2
 8000a8c:	428c      	cmp	r4, r1
 8000a8e:	d039      	beq.n	8000b04 <__aeabi_fsub+0xa4>
 8000a90:	1bea      	subs	r2, r5, r7
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd58      	ble.n	8000b48 <__aeabi_fsub+0xe8>
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d068      	beq.n	8000b6c <__aeabi_fsub+0x10c>
 8000a9a:	2dff      	cmp	r5, #255	; 0xff
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x40>
 8000a9e:	e0d1      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	04db      	lsls	r3, r3, #19
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	2a1b      	cmp	r2, #27
 8000aa8:	dc00      	bgt.n	8000aac <__aeabi_fsub+0x4c>
 8000aaa:	e0e3      	b.n	8000c74 <__aeabi_fsub+0x214>
 8000aac:	2301      	movs	r3, #1
 8000aae:	4662      	mov	r2, ip
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	015a      	lsls	r2, r3, #5
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_fsub+0x58>
 8000ab6:	e0ac      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	099e      	lsrs	r6, r3, #6
 8000abc:	0030      	movs	r0, r6
 8000abe:	f000 fa11 	bl	8000ee4 <__clzsi2>
 8000ac2:	0033      	movs	r3, r6
 8000ac4:	3805      	subs	r0, #5
 8000ac6:	4083      	lsls	r3, r0
 8000ac8:	4285      	cmp	r5, r0
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0x6e>
 8000acc:	e0c6      	b.n	8000c5c <__aeabi_fsub+0x1fc>
 8000ace:	4ab2      	ldr	r2, [pc, #712]	; (8000d98 <__aeabi_fsub+0x338>)
 8000ad0:	1a2d      	subs	r5, r5, r0
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fsub+0x82>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	401a      	ands	r2, r3
 8000adc:	2a04      	cmp	r2, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fsub+0x82>
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	015a      	lsls	r2, r3, #5
 8000ae4:	d400      	bmi.n	8000ae8 <__aeabi_fsub+0x88>
 8000ae6:	e097      	b.n	8000c18 <__aeabi_fsub+0x1b8>
 8000ae8:	1c6a      	adds	r2, r5, #1
 8000aea:	2dfe      	cmp	r5, #254	; 0xfe
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x90>
 8000aee:	e084      	b.n	8000bfa <__aeabi_fsub+0x19a>
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	0a5e      	lsrs	r6, r3, #9
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	05d0      	lsls	r0, r2, #23
 8000af8:	4330      	orrs	r0, r6
 8000afa:	07e4      	lsls	r4, r4, #31
 8000afc:	4320      	orrs	r0, r4
 8000afe:	bc80      	pop	{r7}
 8000b00:	46b8      	mov	r8, r7
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b04:	1bea      	subs	r2, r5, r7
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	dd41      	ble.n	8000b8e <__aeabi_fsub+0x12e>
 8000b0a:	2f00      	cmp	r7, #0
 8000b0c:	d06b      	beq.n	8000be6 <__aeabi_fsub+0x186>
 8000b0e:	2dff      	cmp	r5, #255	; 0xff
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0xb4>
 8000b12:	e097      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	04db      	lsls	r3, r3, #19
 8000b18:	4318      	orrs	r0, r3
 8000b1a:	2a1b      	cmp	r2, #27
 8000b1c:	dc00      	bgt.n	8000b20 <__aeabi_fsub+0xc0>
 8000b1e:	e0cc      	b.n	8000cba <__aeabi_fsub+0x25a>
 8000b20:	2301      	movs	r3, #1
 8000b22:	4463      	add	r3, ip
 8000b24:	015a      	lsls	r2, r3, #5
 8000b26:	d574      	bpl.n	8000c12 <__aeabi_fsub+0x1b2>
 8000b28:	3501      	adds	r5, #1
 8000b2a:	2dff      	cmp	r5, #255	; 0xff
 8000b2c:	d065      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	499a      	ldr	r1, [pc, #616]	; (8000d9c <__aeabi_fsub+0x33c>)
 8000b32:	401a      	ands	r2, r3
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	400b      	ands	r3, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	e7cb      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d01f      	beq.n	8000b80 <__aeabi_fsub+0x120>
 8000b40:	428c      	cmp	r4, r1
 8000b42:	d022      	beq.n	8000b8a <__aeabi_fsub+0x12a>
 8000b44:	002a      	movs	r2, r5
 8000b46:	3aff      	subs	r2, #255	; 0xff
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d035      	beq.n	8000bb8 <__aeabi_fsub+0x158>
 8000b4c:	1b7a      	subs	r2, r7, r5
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fsub+0xf4>
 8000b52:	e099      	b.n	8000c88 <__aeabi_fsub+0x228>
 8000b54:	4663      	mov	r3, ip
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0xfc>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_fsub+0x2b8>
 8000b5c:	1e53      	subs	r3, r2, #1
 8000b5e:	2a01      	cmp	r2, #1
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x104>
 8000b62:	e105      	b.n	8000d70 <__aeabi_fsub+0x310>
 8000b64:	2aff      	cmp	r2, #255	; 0xff
 8000b66:	d06b      	beq.n	8000c40 <__aeabi_fsub+0x1e0>
 8000b68:	001a      	movs	r2, r3
 8000b6a:	e094      	b.n	8000c96 <__aeabi_fsub+0x236>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d073      	beq.n	8000c58 <__aeabi_fsub+0x1f8>
 8000b70:	1e51      	subs	r1, r2, #1
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x118>
 8000b76:	e0df      	b.n	8000d38 <__aeabi_fsub+0x2d8>
 8000b78:	2aff      	cmp	r2, #255	; 0xff
 8000b7a:	d063      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	e792      	b.n	8000aa6 <__aeabi_fsub+0x46>
 8000b80:	2201      	movs	r2, #1
 8000b82:	4051      	eors	r1, r2
 8000b84:	42a1      	cmp	r1, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x12a>
 8000b88:	e782      	b.n	8000a90 <__aeabi_fsub+0x30>
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	3aff      	subs	r2, #255	; 0xff
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d036      	beq.n	8000c00 <__aeabi_fsub+0x1a0>
 8000b92:	1b7a      	subs	r2, r7, r5
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x13a>
 8000b98:	e0aa      	b.n	8000cf0 <__aeabi_fsub+0x290>
 8000b9a:	2fff      	cmp	r7, #255	; 0xff
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x140>
 8000b9e:	e0da      	b.n	8000d56 <__aeabi_fsub+0x2f6>
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	4661      	mov	r1, ip
 8000ba4:	04db      	lsls	r3, r3, #19
 8000ba6:	4319      	orrs	r1, r3
 8000ba8:	468c      	mov	ip, r1
 8000baa:	2a1b      	cmp	r2, #27
 8000bac:	dc00      	bgt.n	8000bb0 <__aeabi_fsub+0x150>
 8000bae:	e0d4      	b.n	8000d5a <__aeabi_fsub+0x2fa>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	003d      	movs	r5, r7
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	e7b5      	b.n	8000b24 <__aeabi_fsub+0xc4>
 8000bb8:	27fe      	movs	r7, #254	; 0xfe
 8000bba:	1c6a      	adds	r2, r5, #1
 8000bbc:	4217      	tst	r7, r2
 8000bbe:	d171      	bne.n	8000ca4 <__aeabi_fsub+0x244>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x166>
 8000bc4:	e09e      	b.n	8000d04 <__aeabi_fsub+0x2a4>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x16e>
 8000bcc:	e0d5      	b.n	8000d7a <__aeabi_fsub+0x31a>
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x176>
 8000bd4:	e78f      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000bd6:	1a1b      	subs	r3, r3, r0
 8000bd8:	015e      	lsls	r6, r3, #5
 8000bda:	d400      	bmi.n	8000bde <__aeabi_fsub+0x17e>
 8000bdc:	e0d6      	b.n	8000d8c <__aeabi_fsub+0x32c>
 8000bde:	4663      	mov	r3, ip
 8000be0:	000c      	movs	r4, r1
 8000be2:	1ac3      	subs	r3, r0, r3
 8000be4:	e776      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d036      	beq.n	8000c58 <__aeabi_fsub+0x1f8>
 8000bea:	1e51      	subs	r1, r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x192>
 8000bf0:	e09a      	b.n	8000d28 <__aeabi_fsub+0x2c8>
 8000bf2:	2aff      	cmp	r2, #255	; 0xff
 8000bf4:	d026      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	e78f      	b.n	8000b1a <__aeabi_fsub+0xba>
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e77a      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c00:	27fe      	movs	r7, #254	; 0xfe
 8000c02:	1c6a      	adds	r2, r5, #1
 8000c04:	4217      	tst	r7, r2
 8000c06:	d062      	beq.n	8000cce <__aeabi_fsub+0x26e>
 8000c08:	2aff      	cmp	r2, #255	; 0xff
 8000c0a:	d0f6      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000c0c:	0015      	movs	r5, r2
 8000c0e:	4460      	add	r0, ip
 8000c10:	0843      	lsrs	r3, r0, #1
 8000c12:	075a      	lsls	r2, r3, #29
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fsub+0x1b8>
 8000c16:	e75f      	b.n	8000ad8 <__aeabi_fsub+0x78>
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	2dff      	cmp	r5, #255	; 0xff
 8000c1c:	d012      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c1e:	025b      	lsls	r3, r3, #9
 8000c20:	0a5e      	lsrs	r6, r3, #9
 8000c22:	b2ea      	uxtb	r2, r5
 8000c24:	e767      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c26:	4662      	mov	r2, ip
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x1ce>
 8000c2c:	e093      	b.n	8000d56 <__aeabi_fsub+0x2f6>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d008      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	03d2      	lsls	r2, r2, #15
 8000c36:	4213      	tst	r3, r2
 8000c38:	d004      	beq.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	4210      	tst	r0, r2
 8000c3e:	d101      	bne.n	8000c44 <__aeabi_fsub+0x1e4>
 8000c40:	000c      	movs	r4, r1
 8000c42:	4643      	mov	r3, r8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0d8      	beq.n	8000bfa <__aeabi_fsub+0x19a>
 8000c48:	2680      	movs	r6, #128	; 0x80
 8000c4a:	03f6      	lsls	r6, r6, #15
 8000c4c:	431e      	orrs	r6, r3
 8000c4e:	0276      	lsls	r6, r6, #9
 8000c50:	22ff      	movs	r2, #255	; 0xff
 8000c52:	0a76      	lsrs	r6, r6, #9
 8000c54:	e74f      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000c56:	4643      	mov	r3, r8
 8000c58:	0015      	movs	r5, r2
 8000c5a:	e7de      	b.n	8000c1a <__aeabi_fsub+0x1ba>
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	1b40      	subs	r0, r0, r5
 8000c60:	3001      	adds	r0, #1
 8000c62:	1a12      	subs	r2, r2, r0
 8000c64:	0019      	movs	r1, r3
 8000c66:	4093      	lsls	r3, r2
 8000c68:	40c1      	lsrs	r1, r0
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	4193      	sbcs	r3, r2
 8000c6e:	2500      	movs	r5, #0
 8000c70:	430b      	orrs	r3, r1
 8000c72:	e72f      	b.n	8000ad4 <__aeabi_fsub+0x74>
 8000c74:	2320      	movs	r3, #32
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	0001      	movs	r1, r0
 8000c7a:	4098      	lsls	r0, r3
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	40d1      	lsrs	r1, r2
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	4193      	sbcs	r3, r2
 8000c84:	430b      	orrs	r3, r1
 8000c86:	e712      	b.n	8000aae <__aeabi_fsub+0x4e>
 8000c88:	2fff      	cmp	r7, #255	; 0xff
 8000c8a:	d0d9      	beq.n	8000c40 <__aeabi_fsub+0x1e0>
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	4664      	mov	r4, ip
 8000c90:	04db      	lsls	r3, r3, #19
 8000c92:	431c      	orrs	r4, r3
 8000c94:	46a4      	mov	ip, r4
 8000c96:	2a1b      	cmp	r2, #27
 8000c98:	dd52      	ble.n	8000d40 <__aeabi_fsub+0x2e0>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	000c      	movs	r4, r1
 8000c9e:	003d      	movs	r5, r7
 8000ca0:	1ac3      	subs	r3, r0, r3
 8000ca2:	e706      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000ca4:	4663      	mov	r3, ip
 8000ca6:	1a1e      	subs	r6, r3, r0
 8000ca8:	0173      	lsls	r3, r6, #5
 8000caa:	d439      	bmi.n	8000d20 <__aeabi_fsub+0x2c0>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fsub+0x252>
 8000cb0:	e704      	b.n	8000abc <__aeabi_fsub+0x5c>
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	e71d      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000cba:	2320      	movs	r3, #32
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	0001      	movs	r1, r0
 8000cc0:	4098      	lsls	r0, r3
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	40d1      	lsrs	r1, r2
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	e729      	b.n	8000b22 <__aeabi_fsub+0xc2>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d1a9      	bne.n	8000c26 <__aeabi_fsub+0x1c6>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d056      	beq.n	8000d86 <__aeabi_fsub+0x326>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x280>
 8000cde:	e70a      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	4463      	add	r3, ip
 8000ce4:	015a      	lsls	r2, r3, #5
 8000ce6:	d594      	bpl.n	8000c12 <__aeabi_fsub+0x1b2>
 8000ce8:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <__aeabi_fsub+0x338>)
 8000cea:	3501      	adds	r5, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	e790      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0af      	beq.n	8000c56 <__aeabi_fsub+0x1f6>
 8000cf6:	1e53      	subs	r3, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d015      	beq.n	8000d28 <__aeabi_fsub+0x2c8>
 8000cfc:	2aff      	cmp	r2, #255	; 0xff
 8000cfe:	d02a      	beq.n	8000d56 <__aeabi_fsub+0x2f6>
 8000d00:	001a      	movs	r2, r3
 8000d02:	e752      	b.n	8000baa <__aeabi_fsub+0x14a>
 8000d04:	4662      	mov	r2, ip
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d191      	bne.n	8000c2e <__aeabi_fsub+0x1ce>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d198      	bne.n	8000c40 <__aeabi_fsub+0x1e0>
 8000d0e:	2680      	movs	r6, #128	; 0x80
 8000d10:	2400      	movs	r4, #0
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	03f6      	lsls	r6, r6, #15
 8000d16:	e6ee      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	4643      	mov	r3, r8
 8000d1c:	0015      	movs	r5, r2
 8000d1e:	e77c      	b.n	8000c1a <__aeabi_fsub+0x1ba>
 8000d20:	4663      	mov	r3, ip
 8000d22:	000c      	movs	r4, r1
 8000d24:	1ac6      	subs	r6, r0, r3
 8000d26:	e6c9      	b.n	8000abc <__aeabi_fsub+0x5c>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	4463      	add	r3, ip
 8000d2c:	2501      	movs	r5, #1
 8000d2e:	015a      	lsls	r2, r3, #5
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_fsub+0x2d4>
 8000d32:	e76e      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000d34:	2502      	movs	r5, #2
 8000d36:	e6fa      	b.n	8000b2e <__aeabi_fsub+0xce>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	2501      	movs	r5, #1
 8000d3c:	1a1b      	subs	r3, r3, r0
 8000d3e:	e6b8      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000d40:	4664      	mov	r4, ip
 8000d42:	2320      	movs	r3, #32
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	4662      	mov	r2, ip
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	4193      	sbcs	r3, r2
 8000d52:	4323      	orrs	r3, r4
 8000d54:	e7a2      	b.n	8000c9c <__aeabi_fsub+0x23c>
 8000d56:	4643      	mov	r3, r8
 8000d58:	e774      	b.n	8000c44 <__aeabi_fsub+0x1e4>
 8000d5a:	4661      	mov	r1, ip
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	40d1      	lsrs	r1, r2
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	4662      	mov	r2, ip
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	4193      	sbcs	r3, r2
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	e720      	b.n	8000bb2 <__aeabi_fsub+0x152>
 8000d70:	4663      	mov	r3, ip
 8000d72:	000c      	movs	r4, r1
 8000d74:	2501      	movs	r5, #1
 8000d76:	1ac3      	subs	r3, r0, r3
 8000d78:	e69b      	b.n	8000ab2 <__aeabi_fsub+0x52>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d099      	beq.n	8000cb2 <__aeabi_fsub+0x252>
 8000d7e:	000c      	movs	r4, r1
 8000d80:	4646      	mov	r6, r8
 8000d82:	2200      	movs	r2, #0
 8000d84:	e6b7      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d86:	4646      	mov	r6, r8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e6b4      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fsub+0x332>
 8000d90:	e73f      	b.n	8000c12 <__aeabi_fsub+0x1b2>
 8000d92:	2400      	movs	r4, #0
 8000d94:	2600      	movs	r6, #0
 8000d96:	e6ae      	b.n	8000af6 <__aeabi_fsub+0x96>
 8000d98:	fbffffff 	.word	0xfbffffff
 8000d9c:	7dffffff 	.word	0x7dffffff

08000da0 <__aeabi_f2iz>:
 8000da0:	0241      	lsls	r1, r0, #9
 8000da2:	0042      	lsls	r2, r0, #1
 8000da4:	0fc3      	lsrs	r3, r0, #31
 8000da6:	0a49      	lsrs	r1, r1, #9
 8000da8:	2000      	movs	r0, #0
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	2a7e      	cmp	r2, #126	; 0x7e
 8000dae:	dd03      	ble.n	8000db8 <__aeabi_f2iz+0x18>
 8000db0:	2a9d      	cmp	r2, #157	; 0x9d
 8000db2:	dd02      	ble.n	8000dba <__aeabi_f2iz+0x1a>
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <__aeabi_f2iz+0x3c>)
 8000db6:	1898      	adds	r0, r3, r2
 8000db8:	4770      	bx	lr
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	0400      	lsls	r0, r0, #16
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	2a95      	cmp	r2, #149	; 0x95
 8000dc2:	dc07      	bgt.n	8000dd4 <__aeabi_f2iz+0x34>
 8000dc4:	2096      	movs	r0, #150	; 0x96
 8000dc6:	1a82      	subs	r2, r0, r2
 8000dc8:	40d1      	lsrs	r1, r2
 8000dca:	4248      	negs	r0, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f3      	bne.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd0:	0008      	movs	r0, r1
 8000dd2:	e7f1      	b.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd4:	3a96      	subs	r2, #150	; 0x96
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	e7f7      	b.n	8000dca <__aeabi_f2iz+0x2a>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	7fffffff 	.word	0x7fffffff

08000de0 <__aeabi_ui2f>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	1e04      	subs	r4, r0, #0
 8000de4:	d00e      	beq.n	8000e04 <__aeabi_ui2f+0x24>
 8000de6:	f000 f87d 	bl	8000ee4 <__clzsi2>
 8000dea:	239e      	movs	r3, #158	; 0x9e
 8000dec:	0001      	movs	r1, r0
 8000dee:	1a1b      	subs	r3, r3, r0
 8000df0:	2b96      	cmp	r3, #150	; 0x96
 8000df2:	dc0c      	bgt.n	8000e0e <__aeabi_ui2f+0x2e>
 8000df4:	2808      	cmp	r0, #8
 8000df6:	d02c      	beq.n	8000e52 <__aeabi_ui2f+0x72>
 8000df8:	3908      	subs	r1, #8
 8000dfa:	408c      	lsls	r4, r1
 8000dfc:	0264      	lsls	r4, r4, #9
 8000dfe:	0a64      	lsrs	r4, r4, #9
 8000e00:	b2d8      	uxtb	r0, r3
 8000e02:	e001      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e04:	2000      	movs	r0, #0
 8000e06:	2400      	movs	r4, #0
 8000e08:	05c0      	lsls	r0, r0, #23
 8000e0a:	4320      	orrs	r0, r4
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
 8000e0e:	2b99      	cmp	r3, #153	; 0x99
 8000e10:	dd0a      	ble.n	8000e28 <__aeabi_ui2f+0x48>
 8000e12:	0002      	movs	r2, r0
 8000e14:	0020      	movs	r0, r4
 8000e16:	321b      	adds	r2, #27
 8000e18:	4090      	lsls	r0, r2
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1e50      	subs	r0, r2, #1
 8000e1e:	4182      	sbcs	r2, r0
 8000e20:	2005      	movs	r0, #5
 8000e22:	1a40      	subs	r0, r0, r1
 8000e24:	40c4      	lsrs	r4, r0
 8000e26:	4314      	orrs	r4, r2
 8000e28:	2905      	cmp	r1, #5
 8000e2a:	dc16      	bgt.n	8000e5a <__aeabi_ui2f+0x7a>
 8000e2c:	0022      	movs	r2, r4
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <__aeabi_ui2f+0x8c>)
 8000e30:	4002      	ands	r2, r0
 8000e32:	0765      	lsls	r5, r4, #29
 8000e34:	d009      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e36:	250f      	movs	r5, #15
 8000e38:	402c      	ands	r4, r5
 8000e3a:	2c04      	cmp	r4, #4
 8000e3c:	d005      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e3e:	3204      	adds	r2, #4
 8000e40:	0154      	lsls	r4, r2, #5
 8000e42:	d502      	bpl.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e44:	239f      	movs	r3, #159	; 0x9f
 8000e46:	4002      	ands	r2, r0
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	0192      	lsls	r2, r2, #6
 8000e4c:	0a54      	lsrs	r4, r2, #9
 8000e4e:	b2d8      	uxtb	r0, r3
 8000e50:	e7da      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	2096      	movs	r0, #150	; 0x96
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	e7d6      	b.n	8000e08 <__aeabi_ui2f+0x28>
 8000e5a:	1f4a      	subs	r2, r1, #5
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	0022      	movs	r2, r4
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <__aeabi_ui2f+0x8c>)
 8000e62:	4002      	ands	r2, r0
 8000e64:	0765      	lsls	r5, r4, #29
 8000e66:	d0f0      	beq.n	8000e4a <__aeabi_ui2f+0x6a>
 8000e68:	e7e5      	b.n	8000e36 <__aeabi_ui2f+0x56>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	fbffffff 	.word	0xfbffffff

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	0008      	movs	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e7a:	f000 f8bd 	bl	8000ff8 <__lesf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d401      	bmi.n	8000e86 <__aeabi_cfcmpeq+0xe>
 8000e82:	2100      	movs	r1, #0
 8000e84:	42c8      	cmn	r0, r1
 8000e86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	f000 f849 	bl	8000f20 <__eqsf2>
 8000e8e:	4240      	negs	r0, r0
 8000e90:	3001      	adds	r0, #1
 8000e92:	bd10      	pop	{r4, pc}

08000e94 <__aeabi_fcmplt>:
 8000e94:	b510      	push	{r4, lr}
 8000e96:	f000 f8af 	bl	8000ff8 <__lesf2>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	db01      	blt.n	8000ea2 <__aeabi_fcmplt+0xe>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	bd10      	pop	{r4, pc}
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_fcmple>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	f000 f8a5 	bl	8000ff8 <__lesf2>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	dd01      	ble.n	8000eb6 <__aeabi_fcmple+0xe>
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	bd10      	pop	{r4, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)

08000ebc <__aeabi_fcmpgt>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	f000 f855 	bl	8000f6c <__gesf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	dc01      	bgt.n	8000eca <__aeabi_fcmpgt+0xe>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	bd10      	pop	{r4, pc}
 8000eca:	2001      	movs	r0, #1
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f000 f84b 	bl	8000f6c <__gesf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	da01      	bge.n	8000ede <__aeabi_fcmpge+0xe>
 8000eda:	2000      	movs	r0, #0
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	2001      	movs	r0, #1
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)

08000ee4 <__clzsi2>:
 8000ee4:	211c      	movs	r1, #28
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	4298      	cmp	r0, r3
 8000eec:	d301      	bcc.n	8000ef2 <__clzsi2+0xe>
 8000eee:	0c00      	lsrs	r0, r0, #16
 8000ef0:	3910      	subs	r1, #16
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d301      	bcc.n	8000efc <__clzsi2+0x18>
 8000ef8:	0a00      	lsrs	r0, r0, #8
 8000efa:	3908      	subs	r1, #8
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	4298      	cmp	r0, r3
 8000f00:	d301      	bcc.n	8000f06 <__clzsi2+0x22>
 8000f02:	0900      	lsrs	r0, r0, #4
 8000f04:	3904      	subs	r1, #4
 8000f06:	a202      	add	r2, pc, #8	; (adr r2, 8000f10 <__clzsi2+0x2c>)
 8000f08:	5c10      	ldrb	r0, [r2, r0]
 8000f0a:	1840      	adds	r0, r0, r1
 8000f0c:	4770      	bx	lr
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	02020304 	.word	0x02020304
 8000f14:	01010101 	.word	0x01010101
	...

08000f20 <__eqsf2>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0245      	lsls	r5, r0, #9
 8000f26:	024e      	lsls	r6, r1, #9
 8000f28:	004c      	lsls	r4, r1, #1
 8000f2a:	0fc3      	lsrs	r3, r0, #31
 8000f2c:	0a6d      	lsrs	r5, r5, #9
 8000f2e:	2001      	movs	r0, #1
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	0a76      	lsrs	r6, r6, #9
 8000f34:	0e24      	lsrs	r4, r4, #24
 8000f36:	0fc9      	lsrs	r1, r1, #31
 8000f38:	2aff      	cmp	r2, #255	; 0xff
 8000f3a:	d006      	beq.n	8000f4a <__eqsf2+0x2a>
 8000f3c:	2cff      	cmp	r4, #255	; 0xff
 8000f3e:	d003      	beq.n	8000f48 <__eqsf2+0x28>
 8000f40:	42a2      	cmp	r2, r4
 8000f42:	d101      	bne.n	8000f48 <__eqsf2+0x28>
 8000f44:	42b5      	cmp	r5, r6
 8000f46:	d006      	beq.n	8000f56 <__eqsf2+0x36>
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d1fc      	bne.n	8000f48 <__eqsf2+0x28>
 8000f4e:	2cff      	cmp	r4, #255	; 0xff
 8000f50:	d1fa      	bne.n	8000f48 <__eqsf2+0x28>
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d1f8      	bne.n	8000f48 <__eqsf2+0x28>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d006      	beq.n	8000f68 <__eqsf2+0x48>
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__eqsf2+0x28>
 8000f60:	0028      	movs	r0, r5
 8000f62:	1e43      	subs	r3, r0, #1
 8000f64:	4198      	sbcs	r0, r3
 8000f66:	e7ef      	b.n	8000f48 <__eqsf2+0x28>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e7ed      	b.n	8000f48 <__eqsf2+0x28>

08000f6c <__gesf2>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	0042      	lsls	r2, r0, #1
 8000f70:	0245      	lsls	r5, r0, #9
 8000f72:	024e      	lsls	r6, r1, #9
 8000f74:	004c      	lsls	r4, r1, #1
 8000f76:	0fc3      	lsrs	r3, r0, #31
 8000f78:	0a6d      	lsrs	r5, r5, #9
 8000f7a:	0e12      	lsrs	r2, r2, #24
 8000f7c:	0a76      	lsrs	r6, r6, #9
 8000f7e:	0e24      	lsrs	r4, r4, #24
 8000f80:	0fc8      	lsrs	r0, r1, #31
 8000f82:	2aff      	cmp	r2, #255	; 0xff
 8000f84:	d01b      	beq.n	8000fbe <__gesf2+0x52>
 8000f86:	2cff      	cmp	r4, #255	; 0xff
 8000f88:	d00e      	beq.n	8000fa8 <__gesf2+0x3c>
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d11b      	bne.n	8000fc6 <__gesf2+0x5a>
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d101      	bne.n	8000f96 <__gesf2+0x2a>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d01c      	beq.n	8000fd0 <__gesf2+0x64>
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d00c      	beq.n	8000fb4 <__gesf2+0x48>
 8000f9a:	4283      	cmp	r3, r0
 8000f9c:	d01c      	beq.n	8000fd8 <__gesf2+0x6c>
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	1e58      	subs	r0, r3, #1
 8000fa2:	4008      	ands	r0, r1
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d122      	bne.n	8000ff2 <__gesf2+0x86>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d1f4      	bne.n	8000f9a <__gesf2+0x2e>
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d1f2      	bne.n	8000f9a <__gesf2+0x2e>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1f6      	bne.n	8000fa6 <__gesf2+0x3a>
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4240      	negs	r0, r0
 8000fbc:	e7f3      	b.n	8000fa6 <__gesf2+0x3a>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d117      	bne.n	8000ff2 <__gesf2+0x86>
 8000fc2:	2cff      	cmp	r4, #255	; 0xff
 8000fc4:	d0f0      	beq.n	8000fa8 <__gesf2+0x3c>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d1e7      	bne.n	8000f9a <__gesf2+0x2e>
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d1e5      	bne.n	8000f9a <__gesf2+0x2e>
 8000fce:	e7e6      	b.n	8000f9e <__gesf2+0x32>
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d0e7      	beq.n	8000fa6 <__gesf2+0x3a>
 8000fd6:	e7e2      	b.n	8000f9e <__gesf2+0x32>
 8000fd8:	42a2      	cmp	r2, r4
 8000fda:	dc05      	bgt.n	8000fe8 <__gesf2+0x7c>
 8000fdc:	dbea      	blt.n	8000fb4 <__gesf2+0x48>
 8000fde:	42b5      	cmp	r5, r6
 8000fe0:	d802      	bhi.n	8000fe8 <__gesf2+0x7c>
 8000fe2:	d3e7      	bcc.n	8000fb4 <__gesf2+0x48>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	e7de      	b.n	8000fa6 <__gesf2+0x3a>
 8000fe8:	4243      	negs	r3, r0
 8000fea:	4158      	adcs	r0, r3
 8000fec:	0040      	lsls	r0, r0, #1
 8000fee:	3801      	subs	r0, #1
 8000ff0:	e7d9      	b.n	8000fa6 <__gesf2+0x3a>
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	4240      	negs	r0, r0
 8000ff6:	e7d6      	b.n	8000fa6 <__gesf2+0x3a>

08000ff8 <__lesf2>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	0042      	lsls	r2, r0, #1
 8000ffc:	0245      	lsls	r5, r0, #9
 8000ffe:	024e      	lsls	r6, r1, #9
 8001000:	004c      	lsls	r4, r1, #1
 8001002:	0fc3      	lsrs	r3, r0, #31
 8001004:	0a6d      	lsrs	r5, r5, #9
 8001006:	0e12      	lsrs	r2, r2, #24
 8001008:	0a76      	lsrs	r6, r6, #9
 800100a:	0e24      	lsrs	r4, r4, #24
 800100c:	0fc8      	lsrs	r0, r1, #31
 800100e:	2aff      	cmp	r2, #255	; 0xff
 8001010:	d00b      	beq.n	800102a <__lesf2+0x32>
 8001012:	2cff      	cmp	r4, #255	; 0xff
 8001014:	d00d      	beq.n	8001032 <__lesf2+0x3a>
 8001016:	2a00      	cmp	r2, #0
 8001018:	d11f      	bne.n	800105a <__lesf2+0x62>
 800101a:	2c00      	cmp	r4, #0
 800101c:	d116      	bne.n	800104c <__lesf2+0x54>
 800101e:	2e00      	cmp	r6, #0
 8001020:	d114      	bne.n	800104c <__lesf2+0x54>
 8001022:	2000      	movs	r0, #0
 8001024:	2d00      	cmp	r5, #0
 8001026:	d010      	beq.n	800104a <__lesf2+0x52>
 8001028:	e009      	b.n	800103e <__lesf2+0x46>
 800102a:	2d00      	cmp	r5, #0
 800102c:	d10c      	bne.n	8001048 <__lesf2+0x50>
 800102e:	2cff      	cmp	r4, #255	; 0xff
 8001030:	d113      	bne.n	800105a <__lesf2+0x62>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d108      	bne.n	8001048 <__lesf2+0x50>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d008      	beq.n	800104c <__lesf2+0x54>
 800103a:	4283      	cmp	r3, r0
 800103c:	d012      	beq.n	8001064 <__lesf2+0x6c>
 800103e:	2102      	movs	r1, #2
 8001040:	1e58      	subs	r0, r3, #1
 8001042:	4008      	ands	r0, r1
 8001044:	3801      	subs	r0, #1
 8001046:	e000      	b.n	800104a <__lesf2+0x52>
 8001048:	2002      	movs	r0, #2
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	2d00      	cmp	r5, #0
 800104e:	d1f4      	bne.n	800103a <__lesf2+0x42>
 8001050:	2800      	cmp	r0, #0
 8001052:	d1fa      	bne.n	800104a <__lesf2+0x52>
 8001054:	2001      	movs	r0, #1
 8001056:	4240      	negs	r0, r0
 8001058:	e7f7      	b.n	800104a <__lesf2+0x52>
 800105a:	2c00      	cmp	r4, #0
 800105c:	d1ed      	bne.n	800103a <__lesf2+0x42>
 800105e:	2e00      	cmp	r6, #0
 8001060:	d1eb      	bne.n	800103a <__lesf2+0x42>
 8001062:	e7ec      	b.n	800103e <__lesf2+0x46>
 8001064:	42a2      	cmp	r2, r4
 8001066:	dc05      	bgt.n	8001074 <__lesf2+0x7c>
 8001068:	dbf2      	blt.n	8001050 <__lesf2+0x58>
 800106a:	42b5      	cmp	r5, r6
 800106c:	d802      	bhi.n	8001074 <__lesf2+0x7c>
 800106e:	d3ef      	bcc.n	8001050 <__lesf2+0x58>
 8001070:	2000      	movs	r0, #0
 8001072:	e7ea      	b.n	800104a <__lesf2+0x52>
 8001074:	4243      	negs	r3, r0
 8001076:	4158      	adcs	r0, r3
 8001078:	0040      	lsls	r0, r0, #1
 800107a:	3801      	subs	r0, #1
 800107c:	e7e5      	b.n	800104a <__lesf2+0x52>
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	2414      	movs	r4, #20
 8001088:	193b      	adds	r3, r7, r4
 800108a:	0018      	movs	r0, r3
 800108c:	2314      	movs	r3, #20
 800108e:	001a      	movs	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	f003 fbd5 	bl	8004840 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <MX_GPIO_Init+0x11c>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	4b40      	ldr	r3, [pc, #256]	; (800119c <MX_GPIO_Init+0x11c>)
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0309      	lsls	r1, r1, #12
 80010a0:	430a      	orrs	r2, r1
 80010a2:	615a      	str	r2, [r3, #20]
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <MX_GPIO_Init+0x11c>)
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	031b      	lsls	r3, r3, #12
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <MX_GPIO_Init+0x11c>)
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <MX_GPIO_Init+0x11c>)
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	03c9      	lsls	r1, r1, #15
 80010bc:	430a      	orrs	r2, r1
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <MX_GPIO_Init+0x11c>)
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	03db      	lsls	r3, r3, #15
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <MX_GPIO_Init+0x11c>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <MX_GPIO_Init+0x11c>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0289      	lsls	r1, r1, #10
 80010d8:	430a      	orrs	r2, r1
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <MX_GPIO_Init+0x11c>)
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_GPIO_Init+0x11c>)
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <MX_GPIO_Init+0x11c>)
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	02c9      	lsls	r1, r1, #11
 80010f4:	430a      	orrs	r2, r1
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_GPIO_Init+0x11c>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	02db      	lsls	r3, r3, #11
 8001100:	4013      	ands	r3, r2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001106:	2390      	movs	r3, #144	; 0x90
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fe82 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <MX_GPIO_Init+0x120>)
 800111a:	2200      	movs	r2, #0
 800111c:	0019      	movs	r1, r3
 800111e:	f000 fe7b 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	0192      	lsls	r2, r2, #6
 8001128:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2284      	movs	r2, #132	; 0x84
 800112e:	0392      	lsls	r2, r2, #14
 8001130:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	193b      	adds	r3, r7, r4
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <MX_GPIO_Init+0x124>)
 800113c:	0019      	movs	r1, r3
 800113e:	0010      	movs	r0, r2
 8001140:	f000 fcf2 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2220      	movs	r2, #32
 8001148:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2201      	movs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	193b      	adds	r3, r7, r4
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800115c:	193a      	adds	r2, r7, r4
 800115e:	2390      	movs	r3, #144	; 0x90
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f000 fcdf 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116a:	0021      	movs	r1, r4
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0052      	lsls	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2201      	movs	r2, #1
 8001178:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	187b      	adds	r3, r7, r1
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <MX_GPIO_Init+0x120>)
 800118a:	0019      	movs	r1, r3
 800118c:	0010      	movs	r0, r2
 800118e:	f000 fccb 	bl	8001b28 <HAL_GPIO_Init>

}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b00b      	add	sp, #44	; 0x2c
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f000 fb7f 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f879 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f7ff ff63 	bl	8001080 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ba:	f000 fad3 	bl	8001764 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80011be:	f000 f8cb 	bl	8001358 <MX_SPI1_Init>
  MX_TIM1_Init();
 80011c2:	f000 f9b9 	bl	8001538 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //CS pin should be default high
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4830      	ldr	r0, [pc, #192]	; (800128c <main+0xe4>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	0019      	movs	r1, r3
 80011d0:	f000 fe22 	bl	8001e18 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start PWM on channel 1
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <main+0xe8>)
 80011d6:	2100      	movs	r1, #0
 80011d8:	0018      	movs	r0, r3
 80011da:	f002 f8e3 	bl	80033a4 <HAL_TIM_PWM_Start>

  //bits to send: 00000001 , 10000000, 00000000

  uint8_t txData[3]= {0x01, 0x80, 0};
 80011de:	2308      	movs	r3, #8
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <main+0xec>)
 80011e4:	8811      	ldrh	r1, [r2, #0]
 80011e6:	8019      	strh	r1, [r3, #0]
 80011e8:	7892      	ldrb	r2, [r2, #2]
 80011ea:	709a      	strb	r2, [r3, #2]
  uint8_t rxData[3] = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <main+0xf0>)
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	801a      	strh	r2, [r3, #0]
 80011f4:	2202      	movs	r2, #2
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //CS low to start communication
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4823      	ldr	r0, [pc, #140]	; (800128c <main+0xe4>)
 8001200:	2200      	movs	r2, #0
 8001202:	0019      	movs	r1, r3
 8001204:	f000 fe08 	bl	8001e18 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), 1000);
 8001208:	1d3a      	adds	r2, r7, #4
 800120a:	2308      	movs	r3, #8
 800120c:	18f9      	adds	r1, r7, r3
 800120e:	4823      	ldr	r0, [pc, #140]	; (800129c <main+0xf4>)
 8001210:	23fa      	movs	r3, #250	; 0xfa
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2303      	movs	r3, #3
 8001218:	f001 fcc4 	bl	8002ba4 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //CS high to end communication
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	481a      	ldr	r0, [pc, #104]	; (800128c <main+0xe4>)
 8001222:	2201      	movs	r2, #1
 8001224:	0019      	movs	r1, r3
 8001226:	f000 fdf7 	bl	8001e18 <HAL_GPIO_WritePin>

	  //Useful data: last two bits of rxData[1] and all bits in rxData[2]

	  adcValue = (rxData[1] << 8) | rxData[2]; //converts the two bytes into 16bit number
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	210e      	movs	r1, #14
 800123e:	187b      	adds	r3, r7, r1
 8001240:	801a      	strh	r2, [r3, #0]

	  compareRegister = ((float)adcValue/ADC_MAX_VALUE)*DUTY_CYCLE_RANGE + DUTY_CYCLE_RANGE;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff fdca 	bl	8000de0 <__aeabi_ui2f>
 800124c:	1c03      	adds	r3, r0, #0
 800124e:	4914      	ldr	r1, [pc, #80]	; (80012a0 <main+0xf8>)
 8001250:	1c18      	adds	r0, r3, #0
 8001252:	f7ff f99d 	bl	8000590 <__aeabi_fdiv>
 8001256:	1c03      	adds	r3, r0, #0
 8001258:	4912      	ldr	r1, [pc, #72]	; (80012a4 <main+0xfc>)
 800125a:	1c18      	adds	r0, r3, #0
 800125c:	f7ff fab2 	bl	80007c4 <__aeabi_fmul>
 8001260:	1c03      	adds	r3, r0, #0
 8001262:	4910      	ldr	r1, [pc, #64]	; (80012a4 <main+0xfc>)
 8001264:	1c18      	adds	r0, r3, #0
 8001266:	f7fe fff3 	bl	8000250 <__aeabi_fadd>
 800126a:	1c03      	adds	r3, r0, #0
 800126c:	250c      	movs	r5, #12
 800126e:	197c      	adds	r4, r7, r5
 8001270:	1c18      	adds	r0, r3, #0
 8001272:	f7fe ffd5 	bl	8000220 <__aeabi_f2uiz>
 8001276:	0003      	movs	r3, r0
 8001278:	8023      	strh	r3, [r4, #0]

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compareRegister);
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <main+0xe8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	197a      	adds	r2, r7, r5
 8001280:	8812      	ldrh	r2, [r2, #0]
 8001282:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_Delay(10);
 8001284:	200a      	movs	r0, #10
 8001286:	f000 fb77 	bl	8001978 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //CS low to start communication
 800128a:	e7b6      	b.n	80011fa <main+0x52>
 800128c:	48000400 	.word	0x48000400
 8001290:	2000008c 	.word	0x2000008c
 8001294:	080048b0 	.word	0x080048b0
 8001298:	080048b4 	.word	0x080048b4
 800129c:	20000028 	.word	0x20000028
 80012a0:	447fc000 	.word	0x447fc000
 80012a4:	45480000 	.word	0x45480000

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b099      	sub	sp, #100	; 0x64
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	242c      	movs	r4, #44	; 0x2c
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	0018      	movs	r0, r3
 80012b4:	2334      	movs	r3, #52	; 0x34
 80012b6:	001a      	movs	r2, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	f003 fac1 	bl	8004840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012be:	231c      	movs	r3, #28
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	0018      	movs	r0, r3
 80012c4:	2310      	movs	r3, #16
 80012c6:	001a      	movs	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f003 fab9 	bl	8004840 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ce:	003b      	movs	r3, r7
 80012d0:	0018      	movs	r0, r3
 80012d2:	231c      	movs	r3, #28
 80012d4:	001a      	movs	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	f003 fab2 	bl	8004840 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2220      	movs	r2, #32
 80012e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	2201      	movs	r2, #1
 80012e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 fdaf 	bl	8001e54 <HAL_RCC_OscConfig>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x56>
  {
    Error_Handler();
 80012fa:	f000 f828 	bl	800134e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	211c      	movs	r1, #28
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2207      	movs	r2, #7
 8001304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2203      	movs	r2, #3
 800130a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2101      	movs	r1, #1
 800131c:	0018      	movs	r0, r3
 800131e:	f001 f91f 	bl	8002560 <HAL_RCC_ClockConfig>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001326:	f000 f812 	bl	800134e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800132a:	003b      	movs	r3, r7
 800132c:	2202      	movs	r2, #2
 800132e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001330:	003b      	movs	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	003b      	movs	r3, r7
 8001338:	0018      	movs	r0, r3
 800133a:	f001 fa7d 	bl	8002838 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001342:	f000 f804 	bl	800134e <Error_Handler>
  }
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b019      	add	sp, #100	; 0x64
 800134c:	bd90      	pop	{r4, r7, pc}

0800134e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001352:	b672      	cpsid	i
}
 8001354:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001356:	e7fe      	b.n	8001356 <Error_Handler+0x8>

08001358 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_SPI1_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_SPI1_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_SPI1_Init+0x74>)
 8001364:	2282      	movs	r2, #130	; 0x82
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_SPI1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SPI1_Init+0x74>)
 8001372:	22e0      	movs	r2, #224	; 0xe0
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_SPI1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_SPI1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_SPI1_Init+0x74>)
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SPI1_Init+0x74>)
 800138e:	2218      	movs	r2, #24
 8001390:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SPI1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SPI1_Init+0x74>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_SPI1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <MX_SPI1_Init+0x74>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f001 fb3b 	bl	8002a34 <HAL_SPI_Init>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f7ff ffc4 	bl	800134e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000028 	.word	0x20000028
 80013d0:	40013000 	.word	0x40013000

080013d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	2414      	movs	r4, #20
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	0018      	movs	r0, r3
 80013e2:	2314      	movs	r3, #20
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f003 fa2a 	bl	8004840 <memset>
  if(spiHandle->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2e      	ldr	r2, [pc, #184]	; (80014ac <HAL_SPI_MspInit+0xd8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d155      	bne.n	80014a2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	0149      	lsls	r1, r1, #5
 8001400:	430a      	orrs	r2, r1
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0289      	lsls	r1, r1, #10
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	02c9      	lsls	r1, r1, #11
 8001438:	430a      	orrs	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_SPI_MspInit+0xdc>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	02db      	lsls	r3, r3, #11
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800144a:	193b      	adds	r3, r7, r4
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2202      	movs	r2, #2
 8001454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145c:	193b      	adds	r3, r7, r4
 800145e:	2203      	movs	r2, #3
 8001460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	193a      	adds	r2, r7, r4
 800146a:	2390      	movs	r3, #144	; 0x90
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f000 fb59 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001476:	0021      	movs	r1, r4
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2228      	movs	r2, #40	; 0x28
 800147c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2202      	movs	r2, #2
 8001482:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2203      	movs	r2, #3
 800148e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	187b      	adds	r3, r7, r1
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_SPI_MspInit+0xe0>)
 800149a:	0019      	movs	r1, r3
 800149c:	0010      	movs	r0, r2
 800149e:	f000 fb43 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b00b      	add	sp, #44	; 0x2c
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	430a      	orrs	r2, r1
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0549      	lsls	r1, r1, #21
 80014e0:	430a      	orrs	r2, r1
 80014e2:	61da      	str	r2, [r3, #28]
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_MspInit+0x44>)
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	055b      	lsls	r3, r3, #21
 80014ec:	4013      	ands	r3, r2
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 fa0c 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	2348      	movs	r3, #72	; 0x48
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	0018      	movs	r0, r3
 8001544:	2310      	movs	r3, #16
 8001546:	001a      	movs	r2, r3
 8001548:	2100      	movs	r1, #0
 800154a:	f003 f979 	bl	8004840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	2340      	movs	r3, #64	; 0x40
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	0018      	movs	r0, r3
 8001554:	2308      	movs	r3, #8
 8001556:	001a      	movs	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	f003 f971 	bl	8004840 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155e:	2324      	movs	r3, #36	; 0x24
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	0018      	movs	r0, r3
 8001564:	231c      	movs	r3, #28
 8001566:	001a      	movs	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f003 f969 	bl	8004840 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	0018      	movs	r0, r3
 8001572:	2320      	movs	r3, #32
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f003 f962 	bl	8004840 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <MX_TIM1_Init+0x160>)
 800157e:	4a47      	ldr	r2, [pc, #284]	; (800169c <MX_TIM1_Init+0x164>)
 8001580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <MX_TIM1_Init+0x160>)
 8001584:	222f      	movs	r2, #47	; 0x2f
 8001586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <MX_TIM1_Init+0x160>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MX_TIM1_Init+0x160>)
 8001590:	4a43      	ldr	r2, [pc, #268]	; (80016a0 <MX_TIM1_Init+0x168>)
 8001592:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <MX_TIM1_Init+0x160>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <MX_TIM1_Init+0x160>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <MX_TIM1_Init+0x160>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <MX_TIM1_Init+0x160>)
 80015a8:	0018      	movs	r0, r3
 80015aa:	f001 fe53 	bl	8003254 <HAL_TIM_Base_Init>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015b2:	f7ff fecc 	bl	800134e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	2148      	movs	r1, #72	; 0x48
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	0152      	lsls	r2, r2, #5
 80015be:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c0:	187a      	adds	r2, r7, r1
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <MX_TIM1_Init+0x160>)
 80015c4:	0011      	movs	r1, r2
 80015c6:	0018      	movs	r0, r3
 80015c8:	f002 f86a 	bl	80036a0 <HAL_TIM_ConfigClockSource>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80015d0:	f7ff febd 	bl	800134e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <MX_TIM1_Init+0x160>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f001 fe8c 	bl	80032f4 <HAL_TIM_PWM_Init>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80015e0:	f7ff feb5 	bl	800134e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f2:	187a      	adds	r2, r7, r1
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM1_Init+0x160>)
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f002 fc5f 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001602:	f7ff fea4 	bl	800134e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2124      	movs	r1, #36	; 0x24
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2260      	movs	r2, #96	; 0x60
 800160c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1879      	adds	r1, r7, r1
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_TIM1_Init+0x160>)
 8001636:	2200      	movs	r2, #0
 8001638:	0018      	movs	r0, r3
 800163a:	f001 ff6b 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001642:	f7ff fe84 	bl	800134e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	0192      	lsls	r2, r2, #6
 800166a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001672:	1d3a      	adds	r2, r7, #4
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_TIM1_Init+0x160>)
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f002 fc7d 	bl	8003f78 <HAL_TIMEx_ConfigBreakDeadTime>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001682:	f7ff fe64 	bl	800134e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <MX_TIM1_Init+0x160>)
 8001688:	0018      	movs	r0, r3
 800168a:	f000 f82b 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b016      	add	sp, #88	; 0x58
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	2000008c 	.word	0x2000008c
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	0000ffff 	.word	0x0000ffff

080016a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_TIM_Base_MspInit+0x38>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10d      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0109      	lsls	r1, r1, #4
 80016c0:	430a      	orrs	r2, r1
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	240c      	movs	r4, #12
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	2314      	movs	r3, #20
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f003 f8a2 	bl	8004840 <memset>
  if(timHandle->Instance==TIM1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_TIM_MspPostInit+0x78>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d125      	bne.n	8001752 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_TIM_MspPostInit+0x7c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_TIM_MspPostInit+0x7c>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0289      	lsls	r1, r1, #10
 8001710:	430a      	orrs	r2, r1
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_TIM_MspPostInit+0x7c>)
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0052      	lsls	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	0021      	movs	r1, r4
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2202      	movs	r2, #2
 8001730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2202      	movs	r2, #2
 8001742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	187a      	adds	r2, r7, r1
 8001746:	2390      	movs	r3, #144	; 0x90
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f9eb 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b009      	add	sp, #36	; 0x24
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000

08001764 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <MX_USART2_UART_Init+0x5c>)
 800176c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001770:	2296      	movs	r2, #150	; 0x96
 8001772:	0212      	lsls	r2, r2, #8
 8001774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART2_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <MX_USART2_UART_Init+0x58>)
 80017a8:	0018      	movs	r0, r3
 80017aa:	f002 fc43 	bl	8004034 <HAL_UART_Init>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017b2:	f7ff fdcc 	bl	800134e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200000d4 	.word	0x200000d4
 80017c0:	40004400 	.word	0x40004400

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	2414      	movs	r4, #20
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	0018      	movs	r0, r3
 80017d2:	2314      	movs	r3, #20
 80017d4:	001a      	movs	r2, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	f003 f832 	bl	8004840 <memset>
  if(uartHandle->Instance==USART2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_UART_MspInit+0x90>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d132      	bne.n	800184c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_MspInit+0x94>)
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_UART_MspInit+0x94>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0289      	lsls	r1, r1, #10
 80017f0:	430a      	orrs	r2, r1
 80017f2:	61da      	str	r2, [r3, #28]
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_UART_MspInit+0x94>)
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_UART_MspInit+0x94>)
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_UART_MspInit+0x94>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0289      	lsls	r1, r1, #10
 800180c:	430a      	orrs	r2, r1
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_UART_MspInit+0x94>)
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800181e:	0021      	movs	r1, r4
 8001820:	187b      	adds	r3, r7, r1
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2202      	movs	r2, #2
 800182a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2201      	movs	r2, #1
 800183c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	187a      	adds	r2, r7, r1
 8001840:	2390      	movs	r3, #144	; 0x90
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f96e 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b00b      	add	sp, #44	; 0x2c
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	40004400 	.word	0x40004400
 8001858:	40021000 	.word	0x40021000

0800185c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800185e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0b      	ldr	r4, [pc, #44]	; (80018a8 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001886:	f7ff fe52 	bl	800152e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800188a:	f002 ffe1 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7ff fc8b 	bl	80011a8 <main>

08001892 <LoopForever>:

LoopForever:
    b LoopForever
 8001892:	e7fe      	b.n	8001892 <LoopForever>
  ldr   r0, =_estack
 8001894:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018a0:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 80018a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018a8:	20000160 	.word	0x20000160

080018ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_COMP_IRQHandler>
	...

080018b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_Init+0x24>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_Init+0x24>)
 80018ba:	2110      	movs	r1, #16
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 f809 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c6:	f7ff fdf7 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_InitTick+0x5c>)
 80018e2:	681c      	ldr	r4, [r3, #0]
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_InitTick+0x60>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	0019      	movs	r1, r3
 80018ea:	23fa      	movs	r3, #250	; 0xfa
 80018ec:	0098      	lsls	r0, r3, #2
 80018ee:	f7fe fc0b 	bl	8000108 <__udivsi3>
 80018f2:	0003      	movs	r3, r0
 80018f4:	0019      	movs	r1, r3
 80018f6:	0020      	movs	r0, r4
 80018f8:	f7fe fc06 	bl	8000108 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 f905 	bl	8001b0e <HAL_SYSTICK_Config>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d001      	beq.n	800190c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e00f      	b.n	800192c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d80b      	bhi.n	800192a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	2301      	movs	r3, #1
 8001916:	425b      	negs	r3, r3
 8001918:	2200      	movs	r2, #0
 800191a:	0018      	movs	r0, r3
 800191c:	f000 f8e2 	bl	8001ae4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_InitTick+0x64>)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b003      	add	sp, #12
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	20000008 	.word	0x20000008
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x1c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	001a      	movs	r2, r3
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x20>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	18d2      	adds	r2, r2, r3
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_IncTick+0x20>)
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	20000008 	.word	0x20000008
 8001960:	2000015c 	.word	0x2000015c

08001964 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b02      	ldr	r3, [pc, #8]	; (8001974 <HAL_GetTick+0x10>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	2000015c 	.word	0x2000015c

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff fff0 	bl	8001964 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	001a      	movs	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	189b      	adds	r3, r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	f7ff ffe0 	bl	8001964 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	20000008 	.word	0x20000008

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	0002      	movs	r2, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b7f      	cmp	r3, #127	; 0x7f
 80019d4:	d828      	bhi.n	8001a28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d6:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <__NVIC_SetPriority+0xd4>)
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	33c0      	adds	r3, #192	; 0xc0
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	589b      	ldr	r3, [r3, r2]
 80019e6:	1dfa      	adds	r2, r7, #7
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	0011      	movs	r1, r2
 80019ec:	2203      	movs	r2, #3
 80019ee:	400a      	ands	r2, r1
 80019f0:	00d2      	lsls	r2, r2, #3
 80019f2:	21ff      	movs	r1, #255	; 0xff
 80019f4:	4091      	lsls	r1, r2
 80019f6:	000a      	movs	r2, r1
 80019f8:	43d2      	mvns	r2, r2
 80019fa:	401a      	ands	r2, r3
 80019fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	401a      	ands	r2, r3
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	4003      	ands	r3, r0
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a14:	481f      	ldr	r0, [pc, #124]	; (8001a94 <__NVIC_SetPriority+0xd4>)
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	33c0      	adds	r3, #192	; 0xc0
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a26:	e031      	b.n	8001a8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <__NVIC_SetPriority+0xd8>)
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	0019      	movs	r1, r3
 8001a30:	230f      	movs	r3, #15
 8001a32:	400b      	ands	r3, r1
 8001a34:	3b08      	subs	r3, #8
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3306      	adds	r3, #6
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	18d3      	adds	r3, r2, r3
 8001a3e:	3304      	adds	r3, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1dfa      	adds	r2, r7, #7
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	0011      	movs	r1, r2
 8001a48:	2203      	movs	r2, #3
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	00d2      	lsls	r2, r2, #3
 8001a4e:	21ff      	movs	r1, #255	; 0xff
 8001a50:	4091      	lsls	r1, r2
 8001a52:	000a      	movs	r2, r1
 8001a54:	43d2      	mvns	r2, r2
 8001a56:	401a      	ands	r2, r3
 8001a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	019b      	lsls	r3, r3, #6
 8001a5e:	22ff      	movs	r2, #255	; 0xff
 8001a60:	401a      	ands	r2, r3
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	0018      	movs	r0, r3
 8001a68:	2303      	movs	r3, #3
 8001a6a:	4003      	ands	r3, r0
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <__NVIC_SetPriority+0xd8>)
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	001c      	movs	r4, r3
 8001a78:	230f      	movs	r3, #15
 8001a7a:	4023      	ands	r3, r4
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	430a      	orrs	r2, r1
 8001a82:	3306      	adds	r3, #6
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	18c3      	adds	r3, r0, r3
 8001a88:	3304      	adds	r3, #4
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b003      	add	sp, #12
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	045b      	lsls	r3, r3, #17
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d301      	bcc.n	8001ab4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e010      	b.n	8001ad6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <SysTick_Config+0x44>)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abc:	2301      	movs	r3, #1
 8001abe:	425b      	negs	r3, r3
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff ff7c 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x44>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x44>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	210f      	movs	r1, #15
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ffbf 	bl	8001a9c <SysTick_Config>
 8001b1e:	0003      	movs	r3, r0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e155      	b.n	8001de4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d100      	bne.n	8001b50 <HAL_GPIO_Init+0x28>
 8001b4e:	e146      	b.n	8001dde <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2203      	movs	r2, #3
 8001b62:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d017      	beq.n	8001c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d123      	bne.n	8001c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	58d3      	ldr	r3, [r2, r3]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2207      	movs	r2, #7
 8001c24:	4013      	ands	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	400b      	ands	r3, r1
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	029b      	lsls	r3, r3, #10
 8001c96:	4013      	ands	r3, r2
 8001c98:	d100      	bne.n	8001c9c <HAL_GPIO_Init+0x174>
 8001c9a:	e0a0      	b.n	8001dde <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9c:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_GPIO_Init+0x2d4>)
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <HAL_GPIO_Init+0x2d4>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	619a      	str	r2, [r3, #24]
 8001ca8:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x2d4>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x2d8>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	589b      	ldr	r3, [r3, r2]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	2390      	movs	r3, #144	; 0x90
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x1ee>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_GPIO_Init+0x2dc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x1ea>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a46      	ldr	r2, [pc, #280]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x1e6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a45      	ldr	r2, [pc, #276]	; (8001e0c <HAL_GPIO_Init+0x2e4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x1de>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e008      	b.n	8001d18 <HAL_GPIO_Init+0x1f0>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x1f0>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x1f0>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x1f0>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x1f0>
 8001d16:	2300      	movs	r3, #0
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x2d8>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	035b      	lsls	r3, r3, #13
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	039b      	lsls	r3, r3, #14
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	4013      	ands	r3, r2
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	025b      	lsls	r3, r3, #9
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	40da      	lsrs	r2, r3
 8001dec:	1e13      	subs	r3, r2, #0
 8001dee:	d000      	beq.n	8001df2 <HAL_GPIO_Init+0x2ca>
 8001df0:	e6a2      	b.n	8001b38 <HAL_GPIO_Init+0x10>
  } 
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b006      	add	sp, #24
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	48000c00 	.word	0x48000c00
 8001e10:	48001000 	.word	0x48001000
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	0008      	movs	r0, r1
 8001e22:	0011      	movs	r1, r2
 8001e24:	1cbb      	adds	r3, r7, #2
 8001e26:	1c02      	adds	r2, r0, #0
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	1c7b      	adds	r3, r7, #1
 8001e2c:	1c0a      	adds	r2, r1, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e30:	1c7b      	adds	r3, r7, #1
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e38:	1cbb      	adds	r3, r7, #2
 8001e3a:	881a      	ldrh	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e42:	1cbb      	adds	r3, r7, #2
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f000 fb76 	bl	8002554 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d100      	bne.n	8001e74 <HAL_RCC_OscConfig+0x20>
 8001e72:	e08e      	b.n	8001f92 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e74:	4bc5      	ldr	r3, [pc, #788]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00e      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4bc2      	ldr	r3, [pc, #776]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d117      	bne.n	8001ebc <HAL_RCC_OscConfig+0x68>
 8001e8c:	4bbf      	ldr	r3, [pc, #764]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	23c0      	movs	r3, #192	; 0xc0
 8001e92:	025b      	lsls	r3, r3, #9
 8001e94:	401a      	ands	r2, r3
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	025b      	lsls	r3, r3, #9
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d10e      	bne.n	8001ebc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4bbb      	ldr	r3, [pc, #748]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d100      	bne.n	8001eac <HAL_RCC_OscConfig+0x58>
 8001eaa:	e071      	b.n	8001f90 <HAL_RCC_OscConfig+0x13c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d000      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x62>
 8001eb4:	e06c      	b.n	8001f90 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f000 fb4c 	bl	8002554 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x80>
 8001ec4:	4bb1      	ldr	r3, [pc, #708]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4bb0      	ldr	r3, [pc, #704]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	0249      	lsls	r1, r1, #9
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e02f      	b.n	8001f34 <HAL_RCC_OscConfig+0xe0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0xa2>
 8001edc:	4bab      	ldr	r3, [pc, #684]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4baa      	ldr	r3, [pc, #680]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001ee2:	49ab      	ldr	r1, [pc, #684]	; (8002190 <HAL_RCC_OscConfig+0x33c>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4ba8      	ldr	r3, [pc, #672]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4ba7      	ldr	r3, [pc, #668]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001eee:	49a9      	ldr	r1, [pc, #676]	; (8002194 <HAL_RCC_OscConfig+0x340>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e01e      	b.n	8001f34 <HAL_RCC_OscConfig+0xe0>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	d10e      	bne.n	8001f1c <HAL_RCC_OscConfig+0xc8>
 8001efe:	4ba3      	ldr	r3, [pc, #652]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4ba2      	ldr	r3, [pc, #648]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	02c9      	lsls	r1, r1, #11
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b9f      	ldr	r3, [pc, #636]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b9e      	ldr	r3, [pc, #632]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0249      	lsls	r1, r1, #9
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xe0>
 8001f1c:	4b9b      	ldr	r3, [pc, #620]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b9a      	ldr	r3, [pc, #616]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f22:	499b      	ldr	r1, [pc, #620]	; (8002190 <HAL_RCC_OscConfig+0x33c>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	4b98      	ldr	r3, [pc, #608]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b97      	ldr	r3, [pc, #604]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f2e:	4999      	ldr	r1, [pc, #612]	; (8002194 <HAL_RCC_OscConfig+0x340>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d014      	beq.n	8001f66 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fd12 	bl	8001964 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f46:	f7ff fd0d 	bl	8001964 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e2fd      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f58:	4b8c      	ldr	r3, [pc, #560]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0xf2>
 8001f64:	e015      	b.n	8001f92 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fcfd 	bl	8001964 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fcf8 	bl	8001964 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e2e8      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b82      	ldr	r3, [pc, #520]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x11c>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x14a>
 8001f9c:	e06c      	b.n	8002078 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fa8:	4b78      	ldr	r3, [pc, #480]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	220c      	movs	r2, #12
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d11f      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1a0>
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	23c0      	movs	r3, #192	; 0xc0
 8001fba:	025b      	lsls	r3, r3, #9
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b71      	ldr	r3, [pc, #452]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x188>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e2bb      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	22f8      	movs	r2, #248	; 0xf8
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00da      	lsls	r2, r3, #3
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e041      	b.n	8002078 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d024      	beq.n	8002046 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002002:	2101      	movs	r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fcac 	bl	8001964 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fca7 	bl	8001964 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e297      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d0f1      	beq.n	8002012 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	22f8      	movs	r2, #248	; 0xf8
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	00da      	lsls	r2, r3, #3
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e018      	b.n	8002078 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b51      	ldr	r3, [pc, #324]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_OscConfig+0x338>)
 800204c:	2101      	movs	r1, #1
 800204e:	438a      	bics	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fc87 	bl	8001964 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff fc82 	bl	8001964 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e272      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d1f1      	bne.n	800205c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	d036      	beq.n	80020f0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_RCC_OscConfig+0x338>)
 800208c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002090:	2101      	movs	r1, #1
 8002092:	430a      	orrs	r2, r1
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fc65 	bl	8001964 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff fc60 	bl	8001964 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e250      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x338>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	2202      	movs	r2, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	d0f1      	beq.n	80020a0 <HAL_RCC_OscConfig+0x24c>
 80020bc:	e018      	b.n	80020f0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_RCC_OscConfig+0x338>)
 80020c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCC_OscConfig+0x338>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	438a      	bics	r2, r1
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fc4b 	bl	8001964 <HAL_GetTick>
 80020ce:	0003      	movs	r3, r0
 80020d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fc46 	bl	8001964 <HAL_GetTick>
 80020d8:	0002      	movs	r2, r0
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e236      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_OscConfig+0x338>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2202      	movs	r2, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2204      	movs	r2, #4
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_OscConfig+0x2a8>
 80020fa:	e0b5      	b.n	8002268 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fc:	201f      	movs	r0, #31
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4013      	ands	r3, r2
 800210e:	d110      	bne.n	8002132 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	0549      	lsls	r1, r1, #21
 800211a:	430a      	orrs	r2, r1
 800211c:	61da      	str	r2, [r3, #28]
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	055b      	lsls	r3, r3, #21
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800212c:	183b      	adds	r3, r7, r0
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_OscConfig+0x344>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d11a      	bne.n	8002174 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCC_OscConfig+0x344>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_RCC_OscConfig+0x344>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0049      	lsls	r1, r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214c:	f7ff fc0a 	bl	8001964 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff fc05 	bl	8001964 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1f5      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x344>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d10f      	bne.n	800219c <HAL_RCC_OscConfig+0x348>
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_OscConfig+0x338>)
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8002182:	2101      	movs	r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	621a      	str	r2, [r3, #32]
 8002188:	e036      	b.n	80021f8 <HAL_RCC_OscConfig+0x3a4>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	fffeffff 	.word	0xfffeffff
 8002194:	fffbffff 	.word	0xfffbffff
 8002198:	40007000 	.word	0x40007000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x36a>
 80021a4:	4bca      	ldr	r3, [pc, #808]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4bc9      	ldr	r3, [pc, #804]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	438a      	bics	r2, r1
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	4bc7      	ldr	r3, [pc, #796]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	4bc6      	ldr	r3, [pc, #792]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021b6:	2104      	movs	r1, #4
 80021b8:	438a      	bics	r2, r1
 80021ba:	621a      	str	r2, [r3, #32]
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x3a4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x38c>
 80021c6:	4bc2      	ldr	r3, [pc, #776]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	4bc1      	ldr	r3, [pc, #772]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021cc:	2104      	movs	r1, #4
 80021ce:	430a      	orrs	r2, r1
 80021d0:	621a      	str	r2, [r3, #32]
 80021d2:	4bbf      	ldr	r3, [pc, #764]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	4bbe      	ldr	r3, [pc, #760]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021d8:	2101      	movs	r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	621a      	str	r2, [r3, #32]
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x3a4>
 80021e0:	4bbb      	ldr	r3, [pc, #748]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	4bba      	ldr	r3, [pc, #744]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	621a      	str	r2, [r3, #32]
 80021ec:	4bb8      	ldr	r3, [pc, #736]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	4bb7      	ldr	r3, [pc, #732]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80021f2:	2104      	movs	r1, #4
 80021f4:	438a      	bics	r2, r1
 80021f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d014      	beq.n	800222a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff fbb0 	bl	8001964 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	e009      	b.n	800221e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fbab 	bl	8001964 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	4aaf      	ldr	r2, [pc, #700]	; (80024d4 <HAL_RCC_OscConfig+0x680>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e19a      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4bac      	ldr	r3, [pc, #688]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x3b6>
 8002228:	e013      	b.n	8002252 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222a:	f7ff fb9b 	bl	8001964 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	e009      	b.n	8002248 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff fb96 	bl	8001964 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4aa5      	ldr	r2, [pc, #660]	; (80024d4 <HAL_RCC_OscConfig+0x680>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e185      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	4ba1      	ldr	r3, [pc, #644]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002252:	231f      	movs	r3, #31
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b9c      	ldr	r3, [pc, #624]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	4b9b      	ldr	r3, [pc, #620]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002262:	499d      	ldr	r1, [pc, #628]	; (80024d8 <HAL_RCC_OscConfig+0x684>)
 8002264:	400a      	ands	r2, r1
 8002266:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2210      	movs	r2, #16
 800226e:	4013      	ands	r3, r2
 8002270:	d063      	beq.n	800233a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d12a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800227a:	4b95      	ldr	r3, [pc, #596]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800227c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227e:	4b94      	ldr	r3, [pc, #592]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002280:	2104      	movs	r1, #4
 8002282:	430a      	orrs	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002286:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228a:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff fb67 	bl	8001964 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800229c:	f7ff fb62 	bl	8001964 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e152      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	2202      	movs	r2, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	d0f1      	beq.n	800229c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022b8:	4b85      	ldr	r3, [pc, #532]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	22f8      	movs	r2, #248	; 0xf8
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	00da      	lsls	r2, r3, #3
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
 80022ce:	e034      	b.n	800233a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	3305      	adds	r3, #5
 80022d6:	d111      	bne.n	80022fc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022d8:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022dc:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022de:	2104      	movs	r1, #4
 80022e0:	438a      	bics	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022e4:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	22f8      	movs	r2, #248	; 0xf8
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	00da      	lsls	r2, r3, #3
 80022f4:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
 80022fa:	e01e      	b.n	800233a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022fc:	4b74      	ldr	r3, [pc, #464]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002300:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002302:	2104      	movs	r1, #4
 8002304:	430a      	orrs	r2, r1
 8002306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002308:	4b71      	ldr	r3, [pc, #452]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800230a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230c:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800230e:	2101      	movs	r1, #1
 8002310:	438a      	bics	r2, r1
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fb26 	bl	8001964 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800231e:	f7ff fb21 	bl	8001964 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e111      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002330:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d1f1      	bne.n	800231e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	4013      	ands	r3, r2
 8002342:	d05c      	beq.n	80023fe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002344:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	220c      	movs	r2, #12
 800234a:	4013      	ands	r3, r2
 800234c:	2b0c      	cmp	r3, #12
 800234e:	d00e      	beq.n	800236e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002350:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	220c      	movs	r2, #12
 8002356:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002358:	2b08      	cmp	r3, #8
 800235a:	d114      	bne.n	8002386 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800235c:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	401a      	ands	r2, r3
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	429a      	cmp	r2, r3
 800236c:	d10b      	bne.n	8002386 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800236e:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	4013      	ands	r3, r2
 8002378:	d040      	beq.n	80023fc <HAL_RCC_OscConfig+0x5a8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d03c      	beq.n	80023fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0e6      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002392:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0249      	lsls	r1, r1, #9
 8002398:	430a      	orrs	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fae2 	bl	8001964 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a6:	f7ff fadd 	bl	8001964 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0cd      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80023ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	4013      	ands	r3, r2
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x552>
 80023c4:	e01b      	b.n	80023fe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80023cc:	4943      	ldr	r1, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x688>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7ff fac7 	bl	8001964 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023dc:	f7ff fac2 	bl	8001964 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0b2      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80023f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	4013      	ands	r3, r2
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x588>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023fc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d100      	bne.n	8002408 <HAL_RCC_OscConfig+0x5b4>
 8002406:	e0a4      	b.n	8002552 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	220c      	movs	r2, #12
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x5c2>
 8002414:	e078      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	2b02      	cmp	r3, #2
 800241c:	d14c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002424:	492e      	ldr	r1, [pc, #184]	; (80024e0 <HAL_RCC_OscConfig+0x68c>)
 8002426:	400a      	ands	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fa9b 	bl	8001964 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002434:	f7ff fa96 	bl	8001964 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e086      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	049b      	lsls	r3, r3, #18
 800244e:	4013      	ands	r3, r2
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	220f      	movs	r2, #15
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002462:	430a      	orrs	r2, r1
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_RCC_OscConfig+0x690>)
 800246c:	4013      	ands	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	431a      	orrs	r2, r3
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0449      	lsls	r1, r1, #17
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fa69 	bl	8001964 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7ff fa64 	bl	8001964 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e054      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	049b      	lsls	r3, r3, #18
 80024b2:	4013      	ands	r3, r2
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x644>
 80024b6:	e04c      	b.n	8002552 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_RCC_OscConfig+0x67c>)
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <HAL_RCC_OscConfig+0x68c>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fa4e 	bl	8001964 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x6a6>
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000
 80024d4:	00001388 	.word	0x00001388
 80024d8:	efffffff 	.word	0xefffffff
 80024dc:	fffeffff 	.word	0xfffeffff
 80024e0:	feffffff 	.word	0xfeffffff
 80024e4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fa3c 	bl	8001964 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e02c      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_RCC_OscConfig+0x708>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	049b      	lsls	r3, r3, #18
 8002502:	4013      	ands	r3, r2
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x694>
 8002506:	e024      	b.n	8002552 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01f      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_RCC_OscConfig+0x708>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_OscConfig+0x708>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	429a      	cmp	r2, r3
 800252e:	d10e      	bne.n	800254e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	220f      	movs	r2, #15
 8002534:	401a      	ands	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d107      	bne.n	800254e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	23f0      	movs	r3, #240	; 0xf0
 8002542:	039b      	lsls	r3, r3, #14
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b008      	add	sp, #32
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0bf      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d911      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2201      	movs	r2, #1
 8002588:	4393      	bics	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0a6      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d015      	beq.n	80025dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2204      	movs	r2, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	d006      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80025c0:	21e0      	movs	r1, #224	; 0xe0
 80025c2:	00c9      	lsls	r1, r1, #3
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	22f0      	movs	r2, #240	; 0xf0
 80025ce:	4393      	bics	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	d04c      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b44      	ldr	r3, [pc, #272]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	029b      	lsls	r3, r3, #10
 80025f6:	4013      	ands	r3, r2
 80025f8:	d120      	bne.n	800263c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07a      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	049b      	lsls	r3, r3, #18
 800260e:	4013      	ands	r3, r2
 8002610:	d114      	bne.n	800263c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06e      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 8002620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	029b      	lsls	r3, r3, #10
 8002626:	4013      	ands	r3, r2
 8002628:	d108      	bne.n	800263c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e062      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e05b      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263c:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2203      	movs	r2, #3
 8002642:	4393      	bics	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7ff f988 	bl	8001964 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002658:	e009      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265a:	f7ff f983 	bl	8001964 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a27      	ldr	r2, [pc, #156]	; (8002704 <HAL_RCC_ClockConfig+0x1a4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e042      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	220c      	movs	r2, #12
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1ec      	bne.n	800265a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4013      	ands	r3, r2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d211      	bcs.n	80026b2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4393      	bics	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_ClockConfig+0x19c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e020      	b.n	80026f4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2204      	movs	r2, #4
 80026b8:	4013      	ands	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_RCC_ClockConfig+0x1a8>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026d0:	f000 f820 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026d4:	0001      	movs	r1, r0
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x1a0>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	220f      	movs	r2, #15
 80026de:	4013      	ands	r3, r2
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1ac>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	000a      	movs	r2, r1
 80026e6:	40da      	lsrs	r2, r3
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1b0>)
 80026ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff f8f3 	bl	80018d8 <HAL_InitTick>
  
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b004      	add	sp, #16
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40022000 	.word	0x40022000
 8002700:	40021000 	.word	0x40021000
 8002704:	00001388 	.word	0x00001388
 8002708:	fffff8ff 	.word	0xfffff8ff
 800270c:	08004938 	.word	0x08004938
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	220c      	movs	r2, #12
 8002738:	4013      	ands	r3, r2
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d046      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0xb8>
 800273e:	d848      	bhi.n	80027d2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002740:	2b04      	cmp	r3, #4
 8002742:	d002      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x36>
 8002744:	2b08      	cmp	r3, #8
 8002746:	d003      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x3c>
 8002748:	e043      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800274c:	613b      	str	r3, [r7, #16]
      break;
 800274e:	e043      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	220f      	movs	r2, #15
 8002756:	4013      	ands	r3, r2
 8002758:	4a24      	ldr	r2, [pc, #144]	; (80027ec <HAL_RCC_GetSysClockFreq+0xd8>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	220f      	movs	r2, #15
 8002764:	4013      	ands	r3, r2
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	23c0      	movs	r3, #192	; 0xc0
 8002770:	025b      	lsls	r3, r3, #9
 8002772:	401a      	ands	r2, r3
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	025b      	lsls	r3, r3, #9
 8002778:	429a      	cmp	r2, r3
 800277a:	d109      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	481a      	ldr	r0, [pc, #104]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002780:	f7fd fcc2 	bl	8000108 <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4353      	muls	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e01a      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	401a      	ands	r2, r3
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	025b      	lsls	r3, r3, #9
 800279c:	429a      	cmp	r2, r3
 800279e:	d109      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	4814      	ldr	r0, [pc, #80]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80027a4:	f7fd fcb0 	bl	8000108 <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	001a      	movs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4353      	muls	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	480c      	ldr	r0, [pc, #48]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027b8:	f7fd fca6 	bl	8000108 <__udivsi3>
 80027bc:	0003      	movs	r3, r0
 80027be:	001a      	movs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4353      	muls	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	613b      	str	r3, [r7, #16]
      break;
 80027ca:	e005      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80027ce:	613b      	str	r3, [r7, #16]
      break;
 80027d0:	e002      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027d4:	613b      	str	r3, [r7, #16]
      break;
 80027d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027d8:	693b      	ldr	r3, [r7, #16]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b006      	add	sp, #24
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40021000 	.word	0x40021000
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	08004950 	.word	0x08004950
 80027f0:	08004960 	.word	0x08004960
 80027f4:	02dc6c00 	.word	0x02dc6c00

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_GetHCLKFreq+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002810:	f7ff fff2 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002814:	0001      	movs	r1, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	2207      	movs	r2, #7
 800281e:	4013      	ands	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	40d9      	lsrs	r1, r3
 8002826:	000b      	movs	r3, r1
}    
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40021000 	.word	0x40021000
 8002834:	08004948 	.word	0x08004948

08002838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	4013      	ands	r3, r2
 8002852:	d100      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002854:	e08e      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2017      	movs	r0, #23
 8002858:	183b      	adds	r3, r7, r0
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285e:	4b6e      	ldr	r3, [pc, #440]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	055b      	lsls	r3, r3, #21
 8002866:	4013      	ands	r3, r2
 8002868:	d110      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	0549      	lsls	r1, r1, #21
 8002874:	430a      	orrs	r2, r1
 8002876:	61da      	str	r2, [r3, #28]
 8002878:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	055b      	lsls	r3, r3, #21
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	183b      	adds	r3, r7, r0
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4013      	ands	r3, r2
 8002896:	d11a      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	0049      	lsls	r1, r1, #1
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f85d 	bl	8001964 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	e008      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7ff f858 	bl	8001964 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0a6      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ce:	4b52      	ldr	r3, [pc, #328]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	23c0      	movs	r3, #192	; 0xc0
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d034      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	23c0      	movs	r3, #192	; 0xc0
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d02c      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a4a      	ldr	r2, [pc, #296]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	0249      	lsls	r1, r1, #9
 8002904:	430a      	orrs	r2, r1
 8002906:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800290e:	4945      	ldr	r1, [pc, #276]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002910:	400a      	ands	r2, r1
 8002912:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7ff f81f 	bl	8001964 <HAL_GetTick>
 8002926:	0003      	movs	r3, r0
 8002928:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e009      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7ff f81a 	bl	8001964 <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e067      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	2202      	movs	r2, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d0f0      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295a:	430a      	orrs	r2, r1
 800295c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800295e:	2317      	movs	r3, #23
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296e:	492f      	ldr	r1, [pc, #188]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002970:	400a      	ands	r2, r1
 8002972:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	2203      	movs	r2, #3
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800298e:	430a      	orrs	r2, r1
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2220      	movs	r2, #32
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2210      	movs	r2, #16
 80029c0:	4393      	bics	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	029b      	lsls	r3, r3, #10
 80029d6:	4013      	ands	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	4393      	bics	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ea:	430a      	orrs	r2, r1
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4013      	ands	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b006      	add	sp, #24
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	fffffcff 	.word	0xfffffcff
 8002a24:	fffeffff 	.word	0xfffeffff
 8002a28:	00001388 	.word	0x00001388
 8002a2c:	efffffff 	.word	0xefffffff
 8002a30:	fffcffff 	.word	0xfffcffff

08002a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0a8      	b.n	8002b98 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	2382      	movs	r3, #130	; 0x82
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d009      	beq.n	8002a6e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
 8002a60:	e005      	b.n	8002a6e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	225d      	movs	r2, #93	; 0x5d
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	225c      	movs	r2, #92	; 0x5c
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7fe fca2 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	225d      	movs	r2, #93	; 0x5d
 8002a94:	2102      	movs	r1, #2
 8002a96:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2140      	movs	r1, #64	; 0x40
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	23e0      	movs	r3, #224	; 0xe0
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d902      	bls.n	8002aba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e002      	b.n	8002ac0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	015b      	lsls	r3, r3, #5
 8002abe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	23f0      	movs	r3, #240	; 0xf0
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d008      	beq.n	8002ade <HAL_SPI_Init+0xaa>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	23e0      	movs	r3, #224	; 0xe0
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	2382      	movs	r3, #130	; 0x82
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	2384      	movs	r3, #132	; 0x84
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	400b      	ands	r3, r1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2102      	movs	r1, #2
 8002afa:	400b      	ands	r3, r1
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2101      	movs	r1, #1
 8002b04:	400b      	ands	r3, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6999      	ldr	r1, [r3, #24]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	400b      	ands	r3, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2138      	movs	r1, #56	; 0x38
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	400b      	ands	r3, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	0011      	movs	r1, r2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	401a      	ands	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	2204      	movs	r2, #4
 8002b44:	401a      	ands	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2110      	movs	r1, #16
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	2108      	movs	r1, #8
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68d9      	ldr	r1, [r3, #12]
 8002b5e:	23f0      	movs	r3, #240	; 0xf0
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	400b      	ands	r3, r1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	0011      	movs	r1, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	015b      	lsls	r3, r3, #5
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <HAL_SPI_Init+0x16c>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	225d      	movs	r2, #93	; 0x5d
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b004      	add	sp, #16
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fffff7ff 	.word	0xfffff7ff

08002ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	1cbb      	adds	r3, r7, #2
 8002bb4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bba:	2323      	movs	r3, #35	; 0x23
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	225c      	movs	r2, #92	; 0x5c
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_SPI_TransmitReceive+0x2c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e1c4      	b.n	8002f5a <HAL_SPI_TransmitReceive+0x3b6>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	225c      	movs	r2, #92	; 0x5c
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd8:	f7fe fec4 	bl	8001964 <HAL_GetTick>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002be0:	201b      	movs	r0, #27
 8002be2:	183b      	adds	r3, r7, r0
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	215d      	movs	r1, #93	; 0x5d
 8002be8:	5c52      	ldrb	r2, [r2, r1]
 8002bea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002bf2:	2312      	movs	r3, #18
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	1cba      	adds	r2, r7, #2
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bfc:	183b      	adds	r3, r7, r0
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d011      	beq.n	8002c28 <HAL_SPI_TransmitReceive+0x84>
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	2382      	movs	r3, #130	; 0x82
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x7a>
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d004      	beq.n	8002c28 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002c1e:	2323      	movs	r3, #35	; 0x23
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c26:	e191      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x98>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x98>
 8002c34:	1cbb      	adds	r3, r7, #2
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002c3c:	2323      	movs	r3, #35	; 0x23
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c44:	e182      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	225d      	movs	r2, #93	; 0x5d
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d003      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	225d      	movs	r2, #93	; 0x5d
 8002c56:	2105      	movs	r1, #5
 8002c58:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1cba      	adds	r2, r7, #2
 8002c6a:	2146      	movs	r1, #70	; 0x46
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1cba      	adds	r2, r7, #2
 8002c74:	2144      	movs	r1, #68	; 0x44
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1cba      	adds	r2, r7, #2
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1cba      	adds	r2, r7, #2
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	23e0      	movs	r3, #224	; 0xe0
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d908      	bls.n	8002cba <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	49ac      	ldr	r1, [pc, #688]	; (8002f64 <HAL_SPI_TransmitReceive+0x3c0>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	e008      	b.n	8002ccc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0149      	lsls	r1, r1, #5
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d007      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2140      	movs	r1, #64	; 0x40
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	23e0      	movs	r3, #224	; 0xe0
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d800      	bhi.n	8002cf8 <HAL_SPI_TransmitReceive+0x154>
 8002cf6:	e083      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x168>
 8002d00:	2312      	movs	r3, #18
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d000      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x168>
 8002d0a:	e06d      	b.n	8002de8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d30:	e05a      	b.n	8002de8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_SPI_TransmitReceive+0x1d4>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x1d4>
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d113      	bne.n	8002d78 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	881a      	ldrh	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	1c9a      	adds	r2, r3, #2
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d11c      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x21c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2246      	movs	r2, #70	; 0x46
 8002d8a:	5a9b      	ldrh	r3, [r3, r2]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	1c9a      	adds	r2, r3, #2
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2246      	movs	r2, #70	; 0x46
 8002dae:	5a9b      	ldrh	r3, [r3, r2]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b299      	uxth	r1, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2246      	movs	r2, #70	; 0x46
 8002dba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dc0:	f7fe fdd0 	bl	8001964 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d80b      	bhi.n	8002de8 <HAL_SPI_TransmitReceive+0x244>
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	d008      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002dd6:	2323      	movs	r3, #35	; 0x23
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2203      	movs	r2, #3
 8002ddc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	225d      	movs	r2, #93	; 0x5d
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]
        goto error;
 8002de6:	e0b1      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19f      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x18e>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2246      	movs	r2, #70	; 0x46
 8002df6:	5a9b      	ldrh	r3, [r3, r2]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d199      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x18e>
 8002dfe:	e089      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x270>
 8002e08:	2312      	movs	r3, #18
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d000      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x270>
 8002e12:	e074      	b.n	8002efe <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3a:	e060      	b.n	8002efe <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d11c      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x2e0>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x2e0>
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d114      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d11e      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x32c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2246      	movs	r2, #70	; 0x46
 8002e96:	5a9b      	ldrh	r3, [r3, r2]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2246      	movs	r2, #70	; 0x46
 8002ebe:	5a9b      	ldrh	r3, [r3, r2]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2246      	movs	r2, #70	; 0x46
 8002eca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ed0:	f7fe fd48 	bl	8001964 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d802      	bhi.n	8002ee6 <HAL_SPI_TransmitReceive+0x342>
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_SPI_TransmitReceive+0x348>
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d108      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002eec:	2323      	movs	r3, #35	; 0x23
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	225d      	movs	r2, #93	; 0x5d
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]
        goto error;
 8002efc:	e026      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d199      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x298>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2246      	movs	r2, #70	; 0x46
 8002f0c:	5a9b      	ldrh	r3, [r3, r2]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d193      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f954 	bl	80031c8 <SPI_EndRxTxTransaction>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002f24:	2323      	movs	r3, #35	; 0x23
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002f3a:	2323      	movs	r3, #35	; 0x23
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e003      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	225d      	movs	r2, #93	; 0x5d
 8002f48:	2101      	movs	r1, #1
 8002f4a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	225c      	movs	r2, #92	; 0x5c
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f54:	2323      	movs	r3, #35	; 0x23
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b00a      	add	sp, #40	; 0x28
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	ffffefff 	.word	0xffffefff

08002f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	1dfb      	adds	r3, r7, #7
 8002f76:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f78:	f7fe fcf4 	bl	8001964 <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f88:	f7fe fcec 	bl	8001964 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	015b      	lsls	r3, r3, #5
 8002f96:	0d1b      	lsrs	r3, r3, #20
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	4353      	muls	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f9e:	e058      	b.n	8003052 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d055      	beq.n	8003052 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fa6:	f7fe fcdd 	bl	8001964 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d902      	bls.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x54>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d142      	bne.n	8003042 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	21e0      	movs	r1, #224	; 0xe0
 8002fc8:	438a      	bics	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	2382      	movs	r3, #130	; 0x82
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d113      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d005      	beq.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	429a      	cmp	r2, r3
 800300a:	d110      	bne.n	800302e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	491a      	ldr	r1, [pc, #104]	; (8003080 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0189      	lsls	r1, r1, #6
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	225d      	movs	r2, #93	; 0x5d
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	225c      	movs	r2, #92	; 0x5c
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e017      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3b01      	subs	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	425a      	negs	r2, r3
 8003062:	4153      	adcs	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	001a      	movs	r2, r3
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d197      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b008      	add	sp, #32
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	20000000 	.word	0x20000000
 8003080:	ffffdfff 	.word	0xffffdfff

08003084 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003092:	2317      	movs	r3, #23
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800309a:	f7fe fc63 	bl	8001964 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030aa:	f7fe fc5b 	bl	8001964 <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	0013      	movs	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	00da      	lsls	r2, r3, #3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	0d1b      	lsrs	r3, r3, #20
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	4353      	muls	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030d0:	e068      	b.n	80031a4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	23c0      	movs	r3, #192	; 0xc0
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	429a      	cmp	r2, r3
 80030da:	d10a      	bne.n	80030f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	2117      	movs	r1, #23
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3301      	adds	r3, #1
 80030f6:	d055      	beq.n	80031a4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030f8:	f7fe fc34 	bl	8001964 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d142      	bne.n	8003194 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	21e0      	movs	r1, #224	; 0xe0
 800311a:	438a      	bics	r2, r1
 800311c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	2382      	movs	r3, #130	; 0x82
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	429a      	cmp	r2, r3
 8003128:	d113      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0xce>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	429a      	cmp	r2, r3
 8003134:	d005      	beq.n	8003142 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	429a      	cmp	r2, r3
 8003140:	d107      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	; 0x40
 800314e:	438a      	bics	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	429a      	cmp	r2, r3
 800315c:	d110      	bne.n	8003180 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800316a:	400a      	ands	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	0189      	lsls	r1, r1, #6
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	225d      	movs	r2, #93	; 0x5d
 8003184:	2101      	movs	r1, #1
 8003186:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	225c      	movs	r2, #92	; 0x5c
 800318c:	2100      	movs	r1, #0
 800318e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e010      	b.n	80031b6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d18e      	bne.n	80030d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b00a      	add	sp, #40	; 0x28
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20000000 	.word	0x20000000
 80031c4:	ffffdfff 	.word	0xffffdfff

080031c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	23c0      	movs	r3, #192	; 0xc0
 80031d8:	0159      	lsls	r1, r3, #5
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	0013      	movs	r3, r2
 80031e2:	2200      	movs	r2, #0
 80031e4:	f7ff ff4e 	bl	8003084 <SPI_WaitFifoStateUntilTimeout>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d007      	beq.n	80031fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	2220      	movs	r2, #32
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e027      	b.n	800324c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	0013      	movs	r3, r2
 8003206:	2200      	movs	r2, #0
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	f7ff fead 	bl	8002f68 <SPI_WaitFlagStateUntilTimeout>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d007      	beq.n	8003222 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003216:	2220      	movs	r2, #32
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e014      	b.n	800324c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	23c0      	movs	r3, #192	; 0xc0
 8003226:	00d9      	lsls	r1, r3, #3
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	0013      	movs	r3, r2
 8003230:	2200      	movs	r2, #0
 8003232:	f7ff ff27 	bl	8003084 <SPI_WaitFifoStateUntilTimeout>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d007      	beq.n	800324a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	2220      	movs	r2, #32
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e000      	b.n	800324c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e042      	b.n	80032ec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223d      	movs	r2, #61	; 0x3d
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223c      	movs	r2, #60	; 0x3c
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f7fe fa11 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223d      	movs	r2, #61	; 0x3d
 8003286:	2102      	movs	r1, #2
 8003288:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	0019      	movs	r1, r3
 8003294:	0010      	movs	r0, r2
 8003296:	f000 fad7 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2246      	movs	r2, #70	; 0x46
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	223e      	movs	r2, #62	; 0x3e
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	223f      	movs	r2, #63	; 0x3f
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2240      	movs	r2, #64	; 0x40
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2241      	movs	r2, #65	; 0x41
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2242      	movs	r2, #66	; 0x42
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2243      	movs	r2, #67	; 0x43
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2244      	movs	r2, #68	; 0x44
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2245      	movs	r2, #69	; 0x45
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223d      	movs	r2, #61	; 0x3d
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e042      	b.n	800338c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223d      	movs	r2, #61	; 0x3d
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223c      	movs	r2, #60	; 0x3c
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f839 	bl	8003394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	223d      	movs	r2, #61	; 0x3d
 8003326:	2102      	movs	r1, #2
 8003328:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	0019      	movs	r1, r3
 8003334:	0010      	movs	r0, r2
 8003336:	f000 fa87 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2246      	movs	r2, #70	; 0x46
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	223e      	movs	r2, #62	; 0x3e
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223f      	movs	r2, #63	; 0x3f
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2241      	movs	r2, #65	; 0x41
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2242      	movs	r2, #66	; 0x42
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2243      	movs	r2, #67	; 0x43
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2244      	movs	r2, #68	; 0x44
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2245      	movs	r2, #69	; 0x45
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	223d      	movs	r2, #61	; 0x3d
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x22>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	223e      	movs	r2, #62	; 0x3e
 80033b8:	5c9b      	ldrb	r3, [r3, r2]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e01f      	b.n	8003406 <HAL_TIM_PWM_Start+0x62>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d108      	bne.n	80033de <HAL_TIM_PWM_Start+0x3a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	5c9b      	ldrb	r3, [r3, r2]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	4193      	sbcs	r3, r2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e013      	b.n	8003406 <HAL_TIM_PWM_Start+0x62>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d108      	bne.n	80033f6 <HAL_TIM_PWM_Start+0x52>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	1e5a      	subs	r2, r3, #1
 80033f0:	4193      	sbcs	r3, r2
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	e007      	b.n	8003406 <HAL_TIM_PWM_Start+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2241      	movs	r2, #65	; 0x41
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	4193      	sbcs	r3, r2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e074      	b.n	80034f8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_TIM_PWM_Start+0x7a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	223e      	movs	r2, #62	; 0x3e
 8003418:	2102      	movs	r1, #2
 800341a:	5499      	strb	r1, [r3, r2]
 800341c:	e013      	b.n	8003446 <HAL_TIM_PWM_Start+0xa2>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0x8a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	223f      	movs	r2, #63	; 0x3f
 8003428:	2102      	movs	r1, #2
 800342a:	5499      	strb	r1, [r3, r2]
 800342c:	e00b      	b.n	8003446 <HAL_TIM_PWM_Start+0xa2>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0x9a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	2102      	movs	r1, #2
 800343a:	5499      	strb	r1, [r3, r2]
 800343c:	e003      	b.n	8003446 <HAL_TIM_PWM_Start+0xa2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2241      	movs	r2, #65	; 0x41
 8003442:	2102      	movs	r1, #2
 8003444:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fd10 	bl	8003e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_TIM_PWM_Start+0x15c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_PWM_Start+0xd8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_TIM_PWM_Start+0x160>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_PWM_Start+0xd8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_TIM_PWM_Start+0x164>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_PWM_Start+0xd8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_TIM_PWM_Start+0x168>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_TIM_PWM_Start+0xdc>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_TIM_PWM_Start+0xde>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0209      	lsls	r1, r1, #8
 8003494:	430a      	orrs	r2, r1
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIM_PWM_Start+0x15c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00f      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x11e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d009      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x11e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_TIM_PWM_Start+0x16c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_TIM_PWM_Start+0x11e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_TIM_PWM_Start+0x160>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2207      	movs	r2, #7
 80034ca:	4013      	ands	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d010      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	e007      	b.n	80034f6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b004      	add	sp, #16
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800
 8003510:	40000400 	.word	0x40000400

08003514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2317      	movs	r3, #23
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	223c      	movs	r2, #60	; 0x3c
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003532:	2302      	movs	r3, #2
 8003534:	e0ad      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	223c      	movs	r2, #60	; 0x3c
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d100      	bne.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003544:	e076      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d900      	bls.n	800354e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800354c:	e095      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x166>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d04e      	beq.n	80035f2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b08      	cmp	r3, #8
 8003558:	d900      	bls.n	800355c <HAL_TIM_PWM_ConfigChannel+0x48>
 800355a:	e08e      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x166>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d021      	beq.n	80035ac <HAL_TIM_PWM_ConfigChannel+0x98>
 8003568:	e087      	b.n	800367a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f9e8 	bl	8003948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2108      	movs	r1, #8
 8003584:	430a      	orrs	r2, r1
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2104      	movs	r1, #4
 8003594:	438a      	bics	r2, r1
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e06b      	b.n	8003684 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	0011      	movs	r1, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fa4f 	bl	8003a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	0109      	lsls	r1, r1, #4
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4931      	ldr	r1, [pc, #196]	; (800369c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035d8:	400a      	ands	r2, r1
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
      break;
 80035f0:	e048      	b.n	8003684 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 fab0 	bl	8003b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2108      	movs	r1, #8
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2104      	movs	r1, #4
 800361c:	438a      	bics	r2, r1
 800361e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69d9      	ldr	r1, [r3, #28]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	61da      	str	r2, [r3, #28]
      break;
 8003632:	e027      	b.n	8003684 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fb15 	bl	8003c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0109      	lsls	r1, r1, #4
 8003650:	430a      	orrs	r2, r1
 8003652:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	490f      	ldr	r1, [pc, #60]	; (800369c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003660:	400a      	ands	r2, r1
 8003662:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69d9      	ldr	r1, [r3, #28]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	61da      	str	r2, [r3, #28]
      break;
 8003678:	e004      	b.n	8003684 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800367a:	2317      	movs	r3, #23
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
      break;
 8003682:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	223c      	movs	r2, #60	; 0x3c
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

  return status;
 800368c:	2317      	movs	r3, #23
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b006      	add	sp, #24
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	fffffbff 	.word	0xfffffbff

080036a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	230f      	movs	r3, #15
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223c      	movs	r2, #60	; 0x3c
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_TIM_ConfigClockSource+0x20>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0bc      	b.n	800383a <HAL_TIM_ConfigClockSource+0x19a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223c      	movs	r2, #60	; 0x3c
 80036c4:	2101      	movs	r1, #1
 80036c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	223d      	movs	r2, #61	; 0x3d
 80036cc:	2102      	movs	r1, #2
 80036ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2277      	movs	r2, #119	; 0x77
 80036dc:	4393      	bics	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_TIM_ConfigClockSource+0x1a4>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	0192      	lsls	r2, r2, #6
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_TIM_ConfigClockSource+0xde>
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	0192      	lsls	r2, r2, #6
 8003700:	4293      	cmp	r3, r2
 8003702:	d900      	bls.n	8003706 <HAL_TIM_ConfigClockSource+0x66>
 8003704:	e088      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	0152      	lsls	r2, r2, #5
 800370a:	4293      	cmp	r3, r2
 800370c:	d100      	bne.n	8003710 <HAL_TIM_ConfigClockSource+0x70>
 800370e:	e088      	b.n	8003822 <HAL_TIM_ConfigClockSource+0x182>
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	0152      	lsls	r2, r2, #5
 8003714:	4293      	cmp	r3, r2
 8003716:	d900      	bls.n	800371a <HAL_TIM_ConfigClockSource+0x7a>
 8003718:	e07e      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 800371a:	2b70      	cmp	r3, #112	; 0x70
 800371c:	d018      	beq.n	8003750 <HAL_TIM_ConfigClockSource+0xb0>
 800371e:	d900      	bls.n	8003722 <HAL_TIM_ConfigClockSource+0x82>
 8003720:	e07a      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 8003722:	2b60      	cmp	r3, #96	; 0x60
 8003724:	d04f      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x126>
 8003726:	d900      	bls.n	800372a <HAL_TIM_ConfigClockSource+0x8a>
 8003728:	e076      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 800372a:	2b50      	cmp	r3, #80	; 0x50
 800372c:	d03b      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0x106>
 800372e:	d900      	bls.n	8003732 <HAL_TIM_ConfigClockSource+0x92>
 8003730:	e072      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d057      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x146>
 8003736:	d900      	bls.n	800373a <HAL_TIM_ConfigClockSource+0x9a>
 8003738:	e06e      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d063      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x166>
 800373e:	d86b      	bhi.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d060      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x166>
 8003744:	d868      	bhi.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d05d      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x166>
 800374a:	2b10      	cmp	r3, #16
 800374c:	d05b      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x166>
 800374e:	e063      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003760:	f000 fb68 	bl	8003e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2277      	movs	r2, #119	; 0x77
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
      break;
 800377c:	e052      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800378e:	f000 fb51 	bl	8003e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2180      	movs	r1, #128	; 0x80
 800379e:	01c9      	lsls	r1, r1, #7
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
      break;
 80037a4:	e03e      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	001a      	movs	r2, r3
 80037b4:	f000 fac4 	bl	8003d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2150      	movs	r1, #80	; 0x50
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 fb1e 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 80037c4:	e02e      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d2:	001a      	movs	r2, r3
 80037d4:	f000 fae2 	bl	8003d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2160      	movs	r1, #96	; 0x60
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 fb0e 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 80037e4:	e01e      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	001a      	movs	r2, r3
 80037f4:	f000 faa4 	bl	8003d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2140      	movs	r1, #64	; 0x40
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 fafe 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 8003804:	e00e      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0019      	movs	r1, r3
 8003810:	0010      	movs	r0, r2
 8003812:	f000 faf5 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 8003816:	e005      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
      break;
 8003820:	e000      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003822:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	223d      	movs	r2, #61	; 0x3d
 8003828:	2101      	movs	r1, #1
 800382a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	223c      	movs	r2, #60	; 0x3c
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

  return status;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	ffff00ff 	.word	0xffff00ff

08003848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a34      	ldr	r2, [pc, #208]	; (800392c <TIM_Base_SetConfig+0xe4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d008      	beq.n	8003872 <TIM_Base_SetConfig+0x2a>
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	05db      	lsls	r3, r3, #23
 8003866:	429a      	cmp	r2, r3
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0x2a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a30      	ldr	r2, [pc, #192]	; (8003930 <TIM_Base_SetConfig+0xe8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2270      	movs	r2, #112	; 0x70
 8003876:	4393      	bics	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_Base_SetConfig+0xe4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <TIM_Base_SetConfig+0x76>
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	05db      	lsls	r3, r3, #23
 8003892:	429a      	cmp	r2, r3
 8003894:	d013      	beq.n	80038be <TIM_Base_SetConfig+0x76>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <TIM_Base_SetConfig+0xe8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00f      	beq.n	80038be <TIM_Base_SetConfig+0x76>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <TIM_Base_SetConfig+0xec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x76>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a23      	ldr	r2, [pc, #140]	; (8003938 <TIM_Base_SetConfig+0xf0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x76>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a22      	ldr	r2, [pc, #136]	; (800393c <TIM_Base_SetConfig+0xf4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x76>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a21      	ldr	r2, [pc, #132]	; (8003940 <TIM_Base_SetConfig+0xf8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <TIM_Base_SetConfig+0xfc>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	4393      	bics	r3, r2
 80038d6:	001a      	movs	r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0c      	ldr	r2, [pc, #48]	; (800392c <TIM_Base_SetConfig+0xe4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0xce>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <TIM_Base_SetConfig+0xf0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0xce>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0c      	ldr	r2, [pc, #48]	; (800393c <TIM_Base_SetConfig+0xf4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0xce>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <TIM_Base_SetConfig+0xf8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d103      	bne.n	800391e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	615a      	str	r2, [r3, #20]
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b004      	add	sp, #16
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40002000 	.word	0x40002000
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800
 8003944:	fffffcff 	.word	0xfffffcff

08003948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	2201      	movs	r2, #1
 8003958:	4393      	bics	r3, r2
 800395a:	001a      	movs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2270      	movs	r2, #112	; 0x70
 8003976:	4393      	bics	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2203      	movs	r2, #3
 800397e:	4393      	bics	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2202      	movs	r2, #2
 8003990:	4393      	bics	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <TIM_OC1_SetConfig+0xf8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_OC1_SetConfig+0x76>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <TIM_OC1_SetConfig+0xfc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_OC1_SetConfig+0x76>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <TIM_OC1_SetConfig+0x100>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_OC1_SetConfig+0x76>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <TIM_OC1_SetConfig+0x104>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d10c      	bne.n	80039d8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2208      	movs	r2, #8
 80039c2:	4393      	bics	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2204      	movs	r2, #4
 80039d4:	4393      	bics	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <TIM_OC1_SetConfig+0xf8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00b      	beq.n	80039f8 <TIM_OC1_SetConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <TIM_OC1_SetConfig+0xfc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d007      	beq.n	80039f8 <TIM_OC1_SetConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <TIM_OC1_SetConfig+0x100>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_OC1_SetConfig+0xb0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <TIM_OC1_SetConfig+0x104>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <TIM_OC1_SetConfig+0x108>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <TIM_OC1_SetConfig+0x10c>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800
 8003a50:	fffffeff 	.word	0xfffffeff
 8003a54:	fffffdff 	.word	0xfffffdff

08003a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	2210      	movs	r2, #16
 8003a68:	4393      	bics	r3, r2
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a2e      	ldr	r2, [pc, #184]	; (8003b40 <TIM_OC2_SetConfig+0xe8>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <TIM_OC2_SetConfig+0xec>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <TIM_OC2_SetConfig+0xf0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10d      	bne.n	8003ad6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	4393      	bics	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <TIM_OC2_SetConfig+0xf0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC2_SetConfig+0x9e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <TIM_OC2_SetConfig+0xf4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC2_SetConfig+0x9e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <TIM_OC2_SetConfig+0xf8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC2_SetConfig+0x9e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <TIM_OC2_SetConfig+0xfc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d113      	bne.n	8003b1e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <TIM_OC2_SetConfig+0x100>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <TIM_OC2_SetConfig+0x104>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b006      	add	sp, #24
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	ffff8fff 	.word	0xffff8fff
 8003b44:	fffffcff 	.word	0xfffffcff
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	fffffbff 	.word	0xfffffbff
 8003b5c:	fffff7ff 	.word	0xfffff7ff

08003b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a35      	ldr	r2, [pc, #212]	; (8003c44 <TIM_OC3_SetConfig+0xe4>)
 8003b70:	401a      	ands	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2270      	movs	r2, #112	; 0x70
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2203      	movs	r2, #3
 8003b94:	4393      	bics	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <TIM_OC3_SetConfig+0xe8>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <TIM_OC3_SetConfig+0xec>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10d      	bne.n	8003bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <TIM_OC3_SetConfig+0xf0>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <TIM_OC3_SetConfig+0xf4>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <TIM_OC3_SetConfig+0xec>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_OC3_SetConfig+0x9a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <TIM_OC3_SetConfig+0xf8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC3_SetConfig+0x9a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <TIM_OC3_SetConfig+0xfc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC3_SetConfig+0x9a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <TIM_OC3_SetConfig+0x100>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_OC3_SetConfig+0x104>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <TIM_OC3_SetConfig+0x108>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b006      	add	sp, #24
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	fffffeff 	.word	0xfffffeff
 8003c48:	fffffdff 	.word	0xfffffdff
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	fffff7ff 	.word	0xfffff7ff
 8003c54:	fffffbff 	.word	0xfffffbff
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800
 8003c64:	ffffefff 	.word	0xffffefff
 8003c68:	ffffdfff 	.word	0xffffdfff

08003c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <TIM_OC4_SetConfig+0xb0>)
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <TIM_OC4_SetConfig+0xb4>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <TIM_OC4_SetConfig+0xb8>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <TIM_OC4_SetConfig+0xbc>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	031b      	lsls	r3, r3, #12
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <TIM_OC4_SetConfig+0xc0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <TIM_OC4_SetConfig+0x78>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <TIM_OC4_SetConfig+0xc4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_OC4_SetConfig+0x78>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <TIM_OC4_SetConfig+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_OC4_SetConfig+0x78>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <TIM_OC4_SetConfig+0xcc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d109      	bne.n	8003cf8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <TIM_OC4_SetConfig+0xd0>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b006      	add	sp, #24
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	ffffefff 	.word	0xffffefff
 8003d20:	ffff8fff 	.word	0xffff8fff
 8003d24:	fffffcff 	.word	0xfffffcff
 8003d28:	ffffdfff 	.word	0xffffdfff
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800
 8003d3c:	ffffbfff 	.word	0xffffbfff

08003d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2201      	movs	r2, #1
 8003d58:	4393      	bics	r3, r2
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	22f0      	movs	r2, #240	; 0xf0
 8003d6a:	4393      	bics	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	4393      	bics	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b006      	add	sp, #24
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	2210      	movs	r2, #16
 8003dae:	4393      	bics	r3, r2
 8003db0:	001a      	movs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <TIM_TI2_ConfigInputStage+0x60>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	22a0      	movs	r2, #160	; 0xa0
 8003dd8:	4393      	bics	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b006      	add	sp, #24
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	ffff0fff 	.word	0xffff0fff

08003e00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2270      	movs	r2, #112	; 0x70
 8003e14:	4393      	bics	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	2207      	movs	r2, #7
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	609a      	str	r2, [r3, #8]
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <TIM_ETR_SetConfig+0x3c>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b006      	add	sp, #24
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	ffff00ff 	.word	0xffff00ff

08003e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	221f      	movs	r2, #31
 8003e84:	4013      	ands	r3, r2
 8003e86:	2201      	movs	r2, #1
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	0013      	movs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	43d2      	mvns	r2, r2
 8003e96:	401a      	ands	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	211f      	movs	r1, #31
 8003ea4:	400b      	ands	r3, r1
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4099      	lsls	r1, r3
 8003eaa:	000b      	movs	r3, r1
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b006      	add	sp, #24
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223c      	movs	r2, #60	; 0x3c
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e047      	b.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223c      	movs	r2, #60	; 0x3c
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223d      	movs	r2, #61	; 0x3d
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2270      	movs	r2, #112	; 0x70
 8003ef8:	4393      	bics	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00f      	beq.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	05db      	lsls	r3, r3, #23
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d009      	beq.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a11      	ldr	r2, [pc, #68]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10c      	bne.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	223d      	movs	r2, #61	; 0x3d
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	223c      	movs	r2, #60	; 0x3c
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40014000 	.word	0x40014000

08003f78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	223c      	movs	r2, #60	; 0x3c
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e03e      	b.n	8004012 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	223c      	movs	r2, #60	; 0x3c
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	22ff      	movs	r2, #255	; 0xff
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a16      	ldr	r2, [pc, #88]	; (8004024 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003fcc:	401a      	ands	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003fda:	401a      	ands	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a11      	ldr	r2, [pc, #68]	; (800402c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003fe8:	401a      	ands	r2, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	223c      	movs	r2, #60	; 0x3c
 800400c:	2100      	movs	r1, #0
 800400e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	fffffcff 	.word	0xfffffcff
 8004020:	fffffbff 	.word	0xfffffbff
 8004024:	fffff7ff 	.word	0xfffff7ff
 8004028:	ffffefff 	.word	0xffffefff
 800402c:	ffffdfff 	.word	0xffffdfff
 8004030:	ffffbfff 	.word	0xffffbfff

08004034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e044      	b.n	80040d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2278      	movs	r2, #120	; 0x78
 8004052:	2100      	movs	r1, #0
 8004054:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7fd fbb3 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2224      	movs	r2, #36	; 0x24
 8004062:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2101      	movs	r1, #1
 8004070:	438a      	bics	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	0018      	movs	r0, r3
 8004078:	f000 f830 	bl	80040dc <UART_SetConfig>
 800407c:	0003      	movs	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e024      	b.n	80040d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f9ab 	bl	80043ec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	490d      	ldr	r1, [pc, #52]	; (80040d8 <HAL_UART_Init+0xa4>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	212a      	movs	r1, #42	; 0x2a
 80040b2:	438a      	bics	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2101      	movs	r1, #1
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 fa43 	bl	8004554 <UART_CheckIdleState>
 80040ce:	0003      	movs	r3, r0
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	ffffb7ff 	.word	0xffffb7ff

080040dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e4:	231e      	movs	r3, #30
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4aaf      	ldr	r2, [pc, #700]	; (80043c8 <UART_SetConfig+0x2ec>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4aaa      	ldr	r2, [pc, #680]	; (80043cc <UART_SetConfig+0x2f0>)
 8004122:	4013      	ands	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4aa1      	ldr	r2, [pc, #644]	; (80043d0 <UART_SetConfig+0x2f4>)
 800414a:	4013      	ands	r3, r2
 800414c:	0019      	movs	r1, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a9d      	ldr	r2, [pc, #628]	; (80043d4 <UART_SetConfig+0x2f8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d127      	bne.n	80041b2 <UART_SetConfig+0xd6>
 8004162:	4b9d      	ldr	r3, [pc, #628]	; (80043d8 <UART_SetConfig+0x2fc>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	2203      	movs	r2, #3
 8004168:	4013      	ands	r3, r2
 800416a:	2b03      	cmp	r3, #3
 800416c:	d00d      	beq.n	800418a <UART_SetConfig+0xae>
 800416e:	d81b      	bhi.n	80041a8 <UART_SetConfig+0xcc>
 8004170:	2b02      	cmp	r3, #2
 8004172:	d014      	beq.n	800419e <UART_SetConfig+0xc2>
 8004174:	d818      	bhi.n	80041a8 <UART_SetConfig+0xcc>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <UART_SetConfig+0xa4>
 800417a:	2b01      	cmp	r3, #1
 800417c:	d00a      	beq.n	8004194 <UART_SetConfig+0xb8>
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0xcc>
 8004180:	231f      	movs	r3, #31
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e065      	b.n	8004256 <UART_SetConfig+0x17a>
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2202      	movs	r2, #2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e060      	b.n	8004256 <UART_SetConfig+0x17a>
 8004194:	231f      	movs	r3, #31
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2204      	movs	r2, #4
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e05b      	b.n	8004256 <UART_SetConfig+0x17a>
 800419e:	231f      	movs	r3, #31
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2208      	movs	r2, #8
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e056      	b.n	8004256 <UART_SetConfig+0x17a>
 80041a8:	231f      	movs	r3, #31
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2210      	movs	r2, #16
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e051      	b.n	8004256 <UART_SetConfig+0x17a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a89      	ldr	r2, [pc, #548]	; (80043dc <UART_SetConfig+0x300>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d134      	bne.n	8004226 <UART_SetConfig+0x14a>
 80041bc:	4b86      	ldr	r3, [pc, #536]	; (80043d8 <UART_SetConfig+0x2fc>)
 80041be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c0:	23c0      	movs	r3, #192	; 0xc0
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	4013      	ands	r3, r2
 80041c6:	22c0      	movs	r2, #192	; 0xc0
 80041c8:	0292      	lsls	r2, r2, #10
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <UART_SetConfig+0x122>
 80041ce:	22c0      	movs	r2, #192	; 0xc0
 80041d0:	0292      	lsls	r2, r2, #10
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d822      	bhi.n	800421c <UART_SetConfig+0x140>
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	0292      	lsls	r2, r2, #10
 80041da:	4293      	cmp	r3, r2
 80041dc:	d019      	beq.n	8004212 <UART_SetConfig+0x136>
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	0292      	lsls	r2, r2, #10
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d81a      	bhi.n	800421c <UART_SetConfig+0x140>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <UART_SetConfig+0x118>
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	0252      	lsls	r2, r2, #9
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00a      	beq.n	8004208 <UART_SetConfig+0x12c>
 80041f2:	e013      	b.n	800421c <UART_SetConfig+0x140>
 80041f4:	231f      	movs	r3, #31
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e02b      	b.n	8004256 <UART_SetConfig+0x17a>
 80041fe:	231f      	movs	r3, #31
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e026      	b.n	8004256 <UART_SetConfig+0x17a>
 8004208:	231f      	movs	r3, #31
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2204      	movs	r2, #4
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e021      	b.n	8004256 <UART_SetConfig+0x17a>
 8004212:	231f      	movs	r3, #31
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2208      	movs	r2, #8
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e01c      	b.n	8004256 <UART_SetConfig+0x17a>
 800421c:	231f      	movs	r3, #31
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2210      	movs	r2, #16
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e017      	b.n	8004256 <UART_SetConfig+0x17a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <UART_SetConfig+0x304>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d104      	bne.n	800423a <UART_SetConfig+0x15e>
 8004230:	231f      	movs	r3, #31
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e00d      	b.n	8004256 <UART_SetConfig+0x17a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a69      	ldr	r2, [pc, #420]	; (80043e4 <UART_SetConfig+0x308>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d104      	bne.n	800424e <UART_SetConfig+0x172>
 8004244:	231f      	movs	r3, #31
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e003      	b.n	8004256 <UART_SetConfig+0x17a>
 800424e:	231f      	movs	r3, #31
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2210      	movs	r2, #16
 8004254:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	429a      	cmp	r2, r3
 8004260:	d15c      	bne.n	800431c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004262:	231f      	movs	r3, #31
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d015      	beq.n	8004298 <UART_SetConfig+0x1bc>
 800426c:	dc18      	bgt.n	80042a0 <UART_SetConfig+0x1c4>
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00d      	beq.n	800428e <UART_SetConfig+0x1b2>
 8004272:	dc15      	bgt.n	80042a0 <UART_SetConfig+0x1c4>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <UART_SetConfig+0x1a2>
 8004278:	2b02      	cmp	r3, #2
 800427a:	d005      	beq.n	8004288 <UART_SetConfig+0x1ac>
 800427c:	e010      	b.n	80042a0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427e:	f7fe fac5 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004282:	0003      	movs	r3, r0
 8004284:	61bb      	str	r3, [r7, #24]
        break;
 8004286:	e012      	b.n	80042ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004288:	4b57      	ldr	r3, [pc, #348]	; (80043e8 <UART_SetConfig+0x30c>)
 800428a:	61bb      	str	r3, [r7, #24]
        break;
 800428c:	e00f      	b.n	80042ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800428e:	f7fe fa41 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8004292:	0003      	movs	r3, r0
 8004294:	61bb      	str	r3, [r7, #24]
        break;
 8004296:	e00a      	b.n	80042ae <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	61bb      	str	r3, [r7, #24]
        break;
 800429e:	e006      	b.n	80042ae <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042a4:	231e      	movs	r3, #30
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
        break;
 80042ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d100      	bne.n	80042b6 <UART_SetConfig+0x1da>
 80042b4:	e07a      	b.n	80043ac <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	005a      	lsls	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	18d2      	adds	r2, r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0019      	movs	r1, r3
 80042c8:	0010      	movs	r0, r2
 80042ca:	f7fb ff1d 	bl	8000108 <__udivsi3>
 80042ce:	0003      	movs	r3, r0
 80042d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d91c      	bls.n	8004312 <UART_SetConfig+0x236>
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	025b      	lsls	r3, r3, #9
 80042de:	429a      	cmp	r2, r3
 80042e0:	d217      	bcs.n	8004312 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	200e      	movs	r0, #14
 80042e8:	183b      	adds	r3, r7, r0
 80042ea:	210f      	movs	r1, #15
 80042ec:	438a      	bics	r2, r1
 80042ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2207      	movs	r2, #7
 80042f8:	4013      	ands	r3, r2
 80042fa:	b299      	uxth	r1, r3
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	183a      	adds	r2, r7, r0
 8004300:	8812      	ldrh	r2, [r2, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	183a      	adds	r2, r7, r0
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e04c      	b.n	80043ac <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004312:	231e      	movs	r3, #30
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e047      	b.n	80043ac <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800431c:	231f      	movs	r3, #31
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b08      	cmp	r3, #8
 8004324:	d015      	beq.n	8004352 <UART_SetConfig+0x276>
 8004326:	dc18      	bgt.n	800435a <UART_SetConfig+0x27e>
 8004328:	2b04      	cmp	r3, #4
 800432a:	d00d      	beq.n	8004348 <UART_SetConfig+0x26c>
 800432c:	dc15      	bgt.n	800435a <UART_SetConfig+0x27e>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x25c>
 8004332:	2b02      	cmp	r3, #2
 8004334:	d005      	beq.n	8004342 <UART_SetConfig+0x266>
 8004336:	e010      	b.n	800435a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fe fa68 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 800433c:	0003      	movs	r3, r0
 800433e:	61bb      	str	r3, [r7, #24]
        break;
 8004340:	e012      	b.n	8004368 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <UART_SetConfig+0x30c>)
 8004344:	61bb      	str	r3, [r7, #24]
        break;
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004348:	f7fe f9e4 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 800434c:	0003      	movs	r3, r0
 800434e:	61bb      	str	r3, [r7, #24]
        break;
 8004350:	e00a      	b.n	8004368 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	61bb      	str	r3, [r7, #24]
        break;
 8004358:	e006      	b.n	8004368 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800435e:	231e      	movs	r3, #30
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
        break;
 8004366:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01e      	beq.n	80043ac <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	085a      	lsrs	r2, r3, #1
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	18d2      	adds	r2, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0019      	movs	r1, r3
 800437e:	0010      	movs	r0, r2
 8004380:	f7fb fec2 	bl	8000108 <__udivsi3>
 8004384:	0003      	movs	r3, r0
 8004386:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	d90a      	bls.n	80043a4 <UART_SetConfig+0x2c8>
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	429a      	cmp	r2, r3
 8004396:	d205      	bcs.n	80043a4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	e003      	b.n	80043ac <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80043a4:	231e      	movs	r3, #30
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043b8:	231e      	movs	r3, #30
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b008      	add	sp, #32
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	efff69f3 	.word	0xefff69f3
 80043cc:	ffffcfff 	.word	0xffffcfff
 80043d0:	fffff4ff 	.word	0xfffff4ff
 80043d4:	40013800 	.word	0x40013800
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40004400 	.word	0x40004400
 80043e0:	40004800 	.word	0x40004800
 80043e4:	40004c00 	.word	0x40004c00
 80043e8:	007a1200 	.word	0x007a1200

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d00b      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <UART_AdvFeatureConfig+0x144>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d00b      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a43      	ldr	r2, [pc, #268]	; (8004534 <UART_AdvFeatureConfig+0x148>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <UART_AdvFeatureConfig+0x14c>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2208      	movs	r2, #8
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <UART_AdvFeatureConfig+0x150>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2210      	movs	r2, #16
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <UART_AdvFeatureConfig+0x154>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2220      	movs	r2, #32
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <UART_AdvFeatureConfig+0x158>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2240      	movs	r2, #64	; 0x40
 80044c6:	4013      	ands	r3, r2
 80044c8:	d01d      	beq.n	8004506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <UART_AdvFeatureConfig+0x15c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	035b      	lsls	r3, r3, #13
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10b      	bne.n	8004506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <UART_AdvFeatureConfig+0x160>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	4013      	ands	r3, r2
 800450e:	d00b      	beq.n	8004528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <UART_AdvFeatureConfig+0x164>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}
 8004530:	fffdffff 	.word	0xfffdffff
 8004534:	fffeffff 	.word	0xfffeffff
 8004538:	fffbffff 	.word	0xfffbffff
 800453c:	ffff7fff 	.word	0xffff7fff
 8004540:	ffffefff 	.word	0xffffefff
 8004544:	ffffdfff 	.word	0xffffdfff
 8004548:	ffefffff 	.word	0xffefffff
 800454c:	ff9fffff 	.word	0xff9fffff
 8004550:	fff7ffff 	.word	0xfff7ffff

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b092      	sub	sp, #72	; 0x48
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2284      	movs	r2, #132	; 0x84
 8004560:	2100      	movs	r1, #0
 8004562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fd f9fe 	bl	8001964 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2208      	movs	r2, #8
 8004574:	4013      	ands	r3, r2
 8004576:	2b08      	cmp	r3, #8
 8004578:	d12c      	bne.n	80045d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	0391      	lsls	r1, r2, #14
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4a46      	ldr	r2, [pc, #280]	; (800469c <UART_CheckIdleState+0x148>)
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	f000 f88c 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d021      	beq.n	80045d4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004590:	f3ef 8310 	mrs	r3, PRIMASK
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38
 800459a:	2301      	movs	r3, #1
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	438a      	bics	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2278      	movs	r2, #120	; 0x78
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e05f      	b.n	8004694 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d146      	bne.n	8004670 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e4:	2280      	movs	r2, #128	; 0x80
 80045e6:	03d1      	lsls	r1, r2, #15
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <UART_CheckIdleState+0x148>)
 80045ec:	9200      	str	r2, [sp, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f000 f858 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 80045f4:	1e03      	subs	r3, r0, #0
 80045f6:	d03b      	beq.n	8004670 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f8:	f3ef 8310 	mrs	r3, PRIMASK
 80045fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80045fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
 8004602:	2301      	movs	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f383 8810 	msr	PRIMASK, r3
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4921      	ldr	r1, [pc, #132]	; (80046a0 <UART_CheckIdleState+0x14c>)
 800461a:	400a      	ands	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462a:	f3ef 8310 	mrs	r3, PRIMASK
 800462e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004630:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
 8004634:	2301      	movs	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f383 8810 	msr	PRIMASK, r3
}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2101      	movs	r1, #1
 800464c:	438a      	bics	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	2120      	movs	r1, #32
 8004662:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2278      	movs	r2, #120	; 0x78
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e011      	b.n	8004694 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	2120      	movs	r1, #32
 800467c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2278      	movs	r2, #120	; 0x78
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b010      	add	sp, #64	; 0x40
 800469a:	bd80      	pop	{r7, pc}
 800469c:	01ffffff 	.word	0x01ffffff
 80046a0:	fffffedf 	.word	0xfffffedf

080046a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	1dfb      	adds	r3, r7, #7
 80046b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b4:	e04b      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	3301      	adds	r3, #1
 80046ba:	d048      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fd f952 	bl	8001964 <HAL_GetTick>
 80046c0:	0002      	movs	r2, r0
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e04b      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2204      	movs	r2, #4
 80046de:	4013      	ands	r3, r2
 80046e0:	d035      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d111      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f83c 	bl	8004778 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2284      	movs	r2, #132	; 0x84
 8004704:	2108      	movs	r1, #8
 8004706:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2278      	movs	r2, #120	; 0x78
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e02c      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	401a      	ands	r2, r3
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	429a      	cmp	r2, r3
 8004726:	d112      	bne.n	800474e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f81f 	bl	8004778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2284      	movs	r2, #132	; 0x84
 800473e:	2120      	movs	r1, #32
 8004740:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2278      	movs	r2, #120	; 0x78
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	425a      	negs	r2, r3
 800475e:	4153      	adcs	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	001a      	movs	r2, r3
 8004764:	1dfb      	adds	r3, r7, #7
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d0a4      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	; 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004780:	f3ef 8310 	mrs	r3, PRIMASK
 8004784:	617b      	str	r3, [r7, #20]
  return(result);
 8004786:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4926      	ldr	r1, [pc, #152]	; (800483c <UART_EndRxTransfer+0xc4>)
 80047a2:	400a      	ands	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f383 8810 	msr	PRIMASK, r3
}
 80047b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b2:	f3ef 8310 	mrs	r3, PRIMASK
 80047b6:	623b      	str	r3, [r7, #32]
  return(result);
 80047b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
 80047bc:	2301      	movs	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f383 8810 	msr	PRIMASK, r3
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2101      	movs	r1, #1
 80047d4:	438a      	bics	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	f383 8810 	msr	PRIMASK, r3
}
 80047e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d118      	bne.n	800481e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ec:	f3ef 8310 	mrs	r3, PRIMASK
 80047f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f6:	2301      	movs	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f383 8810 	msr	PRIMASK, r3
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2110      	movs	r1, #16
 800480e:	438a      	bics	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2280      	movs	r2, #128	; 0x80
 8004822:	2120      	movs	r1, #32
 8004824:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b00e      	add	sp, #56	; 0x38
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	fffffedf 	.word	0xfffffedf

08004840 <memset>:
 8004840:	0003      	movs	r3, r0
 8004842:	1882      	adds	r2, r0, r2
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	7019      	strb	r1, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	2600      	movs	r6, #0
 8004854:	4c0c      	ldr	r4, [pc, #48]	; (8004888 <__libc_init_array+0x38>)
 8004856:	4d0d      	ldr	r5, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	2600      	movs	r6, #0
 8004862:	f000 f819 	bl	8004898 <_init>
 8004866:	4c0a      	ldr	r4, [pc, #40]	; (8004890 <__libc_init_array+0x40>)
 8004868:	4d0a      	ldr	r5, [pc, #40]	; (8004894 <__libc_init_array+0x44>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	00b3      	lsls	r3, r6, #2
 8004876:	58eb      	ldr	r3, [r5, r3]
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	00b3      	lsls	r3, r6, #2
 8004880:	58eb      	ldr	r3, [r5, r3]
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	08004970 	.word	0x08004970
 800488c:	08004970 	.word	0x08004970
 8004890:	08004974 	.word	0x08004974
 8004894:	08004970 	.word	0x08004970

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr
